/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ohos.multimedia_avsession

import std.collection.*
import std.deriving.*
import ohos.base.*

type ErrCode = Int32

type NativeErrCode = Int32

const AVSESSION_ERROR: NativeErrCode = -1;
const AVSESSION_SUCCESS: NativeErrCode = 0;
const AVSESSION_ERROR_BASE: NativeErrCode = 1000;
const ERR_NO_MEMORY = -(AVSESSION_ERROR_BASE + 1)
const ERR_INVALID_PARAM = -(AVSESSION_ERROR_BASE + 2)
const ERR_SERVICE_NOT_EXIST = -(AVSESSION_ERROR_BASE + 3)
const ERR_SESSION_LISTENER_EXIST = -(AVSESSION_ERROR_BASE + 4)
const ERR_MARSHALLING = -(AVSESSION_ERROR_BASE + 5)
const ERR_UNMARSHALLING = -(AVSESSION_ERROR_BASE + 6)
const ERR_IPC_SEND_REQUEST = -(AVSESSION_ERROR_BASE + 7)
const ERR_SESSION_NOT_EXIST = -(AVSESSION_ERROR_BASE + 9)
const ERR_COMMAND_NOT_SUPPORT = -(AVSESSION_ERROR_BASE + 10)
const ERR_CONTROLLER_NOT_EXIST = -(AVSESSION_ERROR_BASE + 11)
const ERR_NO_PERMISSION = -(AVSESSION_ERROR_BASE + 12)
const ERR_SESSION_DEACTIVE = -(AVSESSION_ERROR_BASE + 13)
const ERR_CONTROLLER_IS_EXIST = -(AVSESSION_ERROR_BASE + 14)
const ERR_START_ABILITY_IS_RUNNING = -(AVSESSION_ERROR_BASE + 15)
const ERR_ABILITY_NOT_AVAILABLE = -(AVSESSION_ERROR_BASE + 16)
const ERR_START_ABILITY_TIMEOUT = -(AVSESSION_ERROR_BASE + 17)
const ERR_COMMAND_SEND_EXCEED_MAX = -(AVSESSION_ERROR_BASE + 18)
const ERR_RPC_SEND_REQUEST = -(AVSESSION_ERROR_BASE + 19)
const ERR_DEVICE_CONNECTION_FAILED = -(AVSESSION_ERROR_BASE + 20)
const ERR_REMOTE_CONNECTION_NOT_EXIST = -(AVSESSION_ERROR_BASE + 21)
const ERR_SESSION_IS_EXIST = -(AVSESSION_ERROR_BASE + 22)
const ERR_PERMISSION_DENIED = -(AVSESSION_ERROR_BASE + 23)
private let ERRCODE_MAP = HashMap<NativeErrCode, ErrCode>(
    [
        (AVSESSION_ERROR, 6600101),
        (ERR_NO_MEMORY, 6600101),
        (ERR_SERVICE_NOT_EXIST, 6600101),
        (ERR_SESSION_LISTENER_EXIST, 6600101),
        (ERR_MARSHALLING, 6600101),
        (ERR_UNMARSHALLING, 6600101),
        (ERR_IPC_SEND_REQUEST, 6600101),
        (ERR_CONTROLLER_IS_EXIST, 6600101),
        (ERR_START_ABILITY_IS_RUNNING, 6600101),
        (ERR_ABILITY_NOT_AVAILABLE, 6600101),
        (ERR_START_ABILITY_TIMEOUT, 6600101),
        (ERR_SESSION_NOT_EXIST, 6600102),
        (ERR_CONTROLLER_NOT_EXIST, 6600103),
        (ERR_RPC_SEND_REQUEST, 6600104),
        (ERR_COMMAND_NOT_SUPPORT, 6600105),
        (ERR_SESSION_DEACTIVE, 6600106),
        (ERR_COMMAND_SEND_EXCEED_MAX, 6600107),
        (ERR_DEVICE_CONNECTION_FAILED, 6600108),
        (ERR_REMOTE_CONNECTION_NOT_EXIST, 6600109),
        (ERR_SESSION_IS_EXIST, 6600101),
        (ERR_PERMISSION_DENIED, 201),
        (ERR_NO_PERMISSION, 202),
        (ERR_INVALID_PARAM, 401)
    ]
)

/* AVSessoin Kit Exception*/
enum AVSessionException {
    EXCEPTION_SESSION_SERVICE
    | EXCEPTION_SESSION_NOT_EXIST
    | EXCEPTION_SESSION_CONTROLLER_NOT_EXIST
    | EXCEPTION_REMOTE_SESSION_CONNECTION_FAILED
    | EXCEPTION_INVALID_SESSION_COMMAND
    | EXCEPTION_SESSION_NOT_ACTIVATED
    | EXCEPTION_TOO_MANY_COMMANDS_OR_EVENTS
    | EXCEPTION_DEVICE_CONNECTION_FAILED
    | EXCEPTION_REMOTE_CONNECTION_NOT_ESTABLISHED
    | EXCEPTION_INVALID_PARAM
    | EXCEPTION_PERMISSION_DENIED
    | EXCEPTION_NO_PERMISSION

    prop value: ErrCode {
        get() {
            match (this) {
                case EXCEPTION_SESSION_SERVICE => 6600101
                case EXCEPTION_SESSION_NOT_EXIST => 6600102
                case EXCEPTION_SESSION_CONTROLLER_NOT_EXIST => 6600103
                case EXCEPTION_REMOTE_SESSION_CONNECTION_FAILED => 6600104
                case EXCEPTION_INVALID_SESSION_COMMAND => 6600105
                case EXCEPTION_SESSION_NOT_ACTIVATED => 6600106
                case EXCEPTION_TOO_MANY_COMMANDS_OR_EVENTS => 6600107
                case EXCEPTION_DEVICE_CONNECTION_FAILED => 6600108
                case EXCEPTION_REMOTE_CONNECTION_NOT_ESTABLISHED => 6600109
                case EXCEPTION_INVALID_PARAM => 401
                case EXCEPTION_PERMISSION_DENIED => 201
                case EXCEPTION_NO_PERMISSION => 202
            }
        }
    }

    static func parse(value: ErrCode): AVSessionException {
        match (value) {
            case 6600101 => EXCEPTION_SESSION_SERVICE
            case 6600102 => EXCEPTION_SESSION_NOT_EXIST
            case 6600103 => EXCEPTION_SESSION_CONTROLLER_NOT_EXIST
            case 6600104 => EXCEPTION_REMOTE_SESSION_CONNECTION_FAILED
            case 6600105 => EXCEPTION_INVALID_SESSION_COMMAND
            case 6600106 => EXCEPTION_SESSION_NOT_ACTIVATED
            case 6600107 => EXCEPTION_TOO_MANY_COMMANDS_OR_EVENTS
            case 6600108 => EXCEPTION_DEVICE_CONNECTION_FAILED
            case 6600109 => EXCEPTION_REMOTE_CONNECTION_NOT_ESTABLISHED
            case 401 => EXCEPTION_INVALID_PARAM
            case 201 => EXCEPTION_PERMISSION_DENIED
            case 202 => EXCEPTION_NO_PERMISSION
            case _ =>
                LOGGER.debug("Unsupported AVSessionException Value:" + value.toString())
                throw IllegalArgumentException("Unsupported AVSessionException")
        }
    }

    func toString(): String {
        match (this) {
            case EXCEPTION_SESSION_SERVICE => "Session service exception."
            case EXCEPTION_SESSION_NOT_EXIST => "The session does not exist."
            case EXCEPTION_SESSION_CONTROLLER_NOT_EXIST => "The session controller does not exist."
            case EXCEPTION_REMOTE_SESSION_CONNECTION_FAILED => "The remote session connection failed."
            case EXCEPTION_INVALID_SESSION_COMMAND => "Invalid session command."
            case EXCEPTION_SESSION_NOT_ACTIVATED => "The session is not activated."
            case EXCEPTION_TOO_MANY_COMMANDS_OR_EVENTS => "Too many commands or events."
            case EXCEPTION_DEVICE_CONNECTION_FAILED => "Device connection failed."
            case EXCEPTION_REMOTE_CONNECTION_NOT_ESTABLISHED => "The remote connection is not established."
            case EXCEPTION_INVALID_PARAM => "parameter check failed. 1.Mandatory parameters are left unspecified. 2.Parameter verification failed."
            case EXCEPTION_PERMISSION_DENIED => "Permission verification failed. The application does not have the permission required to call the API."
            case EXCEPTION_NO_PERMISSION => "Permission verification failed. A non-system application calls a system API."
        }
    }

    static func fromError(error: NativeErrCode): AVSessionException {
        parse(ERRCODE_MAP[error])
    }

    static func msgFromError(error: NativeErrCode): String {
        parse(ERRCODE_MAP[error]).toString()
    }

    static func codeFromError(error: NativeErrCode): Int32 {
        parse(ERRCODE_MAP[error]).value
    }
}

func throwBusinessException(exception: AVSessionException) {
    throw BusinessException(exception.value, exception.toString())
}

func throwBusinessException(exception: Int32) {
    throw BusinessException(AVSessionException.codeFromError(exception), AVSessionException.msgFromError(exception))
}

func checkAndReturn(code: Int32, method: String): Unit {
    if (code != AVSESSION_SUCCESS) {
        let realCode = AVSessionException.codeFromError(code)
        let msg = AVSessionException.msgFromError(code)
        LOGGER.error("${method} failed: ${msg}")
        throw BusinessException(realCode, "${method} failed ${msg}")
    }
}

const SUBSYSTEM_BIT_NUM: Int32 = 21;
const MODULE_BIT_NUM: Int32 = 16;

// bit 28~21 is subsys, bit 20~16 is Module. bit 15~0 is code
const MS_MODULE: ErrCode = 0x01000
const MS_ERR_OFFSET: ErrCode = (30 << SUBSYSTEM_BIT_NUM) | (MS_MODULE << MODULE_BIT_NUM) // 30 is SUBSYS_MULTIMEDIA

// media api9 error code
const MSERR_EXT_API9_OK: ErrCode = 0 // use for determine error
const MSERR_EXT_API9_INVALID_PARAMETER: ErrCode = 401 // invalid parameter.
const MSERR_EXT_API9_NO_MEMORY: ErrCode = 5400101 // no memory.
const MSERR_EXT_API9_OPERATE_NOT_PERMIT: ErrCode = 5400102 // opertation not be permitted.
const MSERR_EXT_API9_IO: ErrCode = 5400103 // IO error.
const MSERR_EXT_API9_TIMEOUT: ErrCode = 5400104 // opertate timeout.
const MSERR_EXT_API9_SERVICE_DIED: ErrCode = 5400105 // media service died.
const MSERR_EXT_API9_UNSUPPORT_FORMAT: ErrCode = 5400106 // unsupport format.

// cast api13 error code
const CAST_GENERICERR_EXT_API13_UNSPECIFIED: ErrCode = 6611000
const CAST_GENERICERR_EXT_API13_REMOTE_ERROR = CAST_GENERICERR_EXT_API13_UNSPECIFIED + 1
const CAST_GENERICERR_EXT_API13_BEHIND_LIVE_WINDOW = CAST_GENERICERR_EXT_API13_UNSPECIFIED + 2
const CAST_GENERICERR_EXT_API13_TIMEOUT = CAST_GENERICERR_EXT_API13_UNSPECIFIED + 3
const CAST_GENERICERR_EXT_API13_FAILED_RUNTIME_CHECK = CAST_GENERICERR_EXT_API13_UNSPECIFIED + 4
const CAST_GENERICERR_EXT_API13_PLAYER_ERROR: ErrCode = 6611100
const CAST_GENERICERR_EXT_API13_SEEK_MODE_UNSUPPORTED = CAST_GENERICERR_EXT_API13_PLAYER_ERROR + 1
const CAST_GENERICERR_EXT_API13_ILLEGAL_SEEK_TARGET = CAST_GENERICERR_EXT_API13_PLAYER_ERROR + 2
const CAST_GENERICERR_EXT_API13_PLAY_MODE_UNSUPPORTED = CAST_GENERICERR_EXT_API13_PLAYER_ERROR + 3
const CAST_GENERICERR_EXT_API13_PLAY_SPEED_UNSUPPORTED = CAST_GENERICERR_EXT_API13_PLAYER_ERROR + 4
const CAST_GENERICERR_EXT_API13_DEVICE_MISSED = CAST_GENERICERR_EXT_API13_PLAYER_ERROR + 5
const CAST_GENERICERR_EXT_API13_INVALID_PARAM = CAST_GENERICERR_EXT_API13_PLAYER_ERROR + 6
const CAST_GENERICERR_EXT_API13_NO_MEMORY = CAST_GENERICERR_EXT_API13_PLAYER_ERROR + 7
const CAST_GENERICERR_EXT_API13_OPERATION_NOT_ALLOWED = CAST_GENERICERR_EXT_API13_PLAYER_ERROR + 8
// Input/Output errors
const CAST_IOERR_EXT_API13_UNSPECIFIED: ErrCode = 6612000
const CAST_IOERR_EXT_API13_NETWORK_CONNECTION_FAILED = CAST_IOERR_EXT_API13_UNSPECIFIED + 1
const CAST_IOERR_EXT_API13_NETWORK_CONNECTION_TIMEOUT = CAST_IOERR_EXT_API13_UNSPECIFIED + 2
const CAST_IOERR_EXT_API13_INVALID_HTTP_CONTENT_TYPE = CAST_IOERR_EXT_API13_UNSPECIFIED + 3
const CAST_IOERR_EXT_API13_BAD_HTTP_STATUS = CAST_IOERR_EXT_API13_UNSPECIFIED + 4
const CAST_IOERR_EXT_API13_FILE_NOT_FOUND = CAST_IOERR_EXT_API13_UNSPECIFIED + 5
const CAST_IOERR_EXT_API13_NO_PERMISSION = CAST_IOERR_EXT_API13_UNSPECIFIED + 6
const CAST_IOERR_EXT_API13_CLEARTEXT_NOT_PERMITTED = CAST_IOERR_EXT_API13_UNSPECIFIED + 6
const CAST_IOERR_EXT_API13_READ_POSITION_OUT_OF_RANGE = CAST_IOERR_EXT_API13_UNSPECIFIED + 7
const CAST_IOERR_EXT_API13_NO_CONTENTS: ErrCode = 6612100
const CAST_IOERR_EXT_API13_READ_ERROR = CAST_IOERR_EXT_API13_NO_CONTENTS + 1
const CAST_IOERR_EXT_API13_CONTENT_BUSY = CAST_IOERR_EXT_API13_NO_CONTENTS + 2
const CAST_IOERR_EXT_API13_CONTENT_EXPIRED = CAST_IOERR_EXT_API13_NO_CONTENTS + 3
const CAST_IOERR_EXT_API13_CONTENT_NON_ALLOWED_USE = CAST_IOERR_EXT_API13_NO_CONTENTS + 4
const CAST_IOERR_EXT_API13_CONTENT_CANNOT_VERIFIED = CAST_IOERR_EXT_API13_NO_CONTENTS + 5
const CAST_IOERR_EXT_API13_CONTENT_EXHAUSTED_ALLOWED_USES = CAST_IOERR_EXT_API13_NO_CONTENTS + 6
const CAST_IOERR_EXT_API13_NETWORK_PACKET_SENDING_FAILURE = CAST_IOERR_EXT_API13_NO_CONTENTS + 7
// Content parsing errors
const CAST_PARSINGERR_EXT_API13_UNSPECIFIED: ErrCode = 6613000
const CAST_PARSINGERR_EXT_API13_CONTAINER_MALFORMED = CAST_PARSINGERR_EXT_API13_UNSPECIFIED + 1
const CAST_PARSINGERR_EXT_API13_MANIFEST_MALFORMED = CAST_PARSINGERR_EXT_API13_UNSPECIFIED + 2
const CAST_PARSINGERR_EXT_API13_CONTAINER_UNSUPPORTED = CAST_PARSINGERR_EXT_API13_UNSPECIFIED + 3
const CAST_PARSINGERR_EXT_API13_MANIFEST_UNSUPPORTED = CAST_PARSINGERR_EXT_API13_UNSPECIFIED + 4
// Decoding errors
const CAST_DECODEERR_EXT_API13_UNSPECIFIED: ErrCode = 6614000
const CAST_DECODEERR_EXT_API13_INIT_FAILED = CAST_DECODEERR_EXT_API13_UNSPECIFIED + 1
const CAST_DECODEERR_EXT_API13_QUERY_FAILED = CAST_DECODEERR_EXT_API13_UNSPECIFIED + 2
const CAST_DECODEERR_EXT_API13_FAILED = CAST_DECODEERR_EXT_API13_UNSPECIFIED + 3
const CAST_DECODEERR_EXT_API13_FORMAT_EXCEEDS_CAPABILITIES = CAST_DECODEERR_EXT_API13_UNSPECIFIED + 4
const CAST_DECODEERR_EXT_API13_FORMAT_UNSUPPORTED = CAST_DECODEERR_EXT_API13_UNSPECIFIED + 5
// AudioRender errors
const CAST_RENDERERR_EXT_API13_UNSPECIFIED: ErrCode = 6615000
const CAST_RENDERERR_EXT_API13_INIT_FAILED = CAST_RENDERERR_EXT_API13_UNSPECIFIED + 1
const CAST_RENDERERR_EXT_API13_WRITE_FAILED = CAST_RENDERERR_EXT_API13_UNSPECIFIED + 2
// DRM errors
const CAST_DRMERR_EXT_API13_UNSPECIFIED: ErrCode = 6616000
const CAST_DRMERR_EXT_API13_SCHEME_UNSUPPORTED = CAST_DRMERR_EXT_API13_UNSPECIFIED + 1
const CAST_DRMERR_EXT_API13_PROVISIONING_FAILED = CAST_DRMERR_EXT_API13_UNSPECIFIED + 1
const CAST_DRMERR_EXT_API13_CONTENT_ERROR = CAST_DRMERR_EXT_API13_UNSPECIFIED + 1
const CAST_DRMERR_EXT_API13_LICENSE_ACQUISITION_FAILED = CAST_DRMERR_EXT_API13_UNSPECIFIED + 1
const CAST_DRMERR_EXT_API13_DISALLOWED_OPERATION = CAST_DRMERR_EXT_API13_UNSPECIFIED + 1
const CAST_DRMERR_EXT_API13_SYSTEM_ERROR = CAST_DRMERR_EXT_API13_UNSPECIFIED + 1
const CAST_DRMERR_EXT_API13_DEVICE_REVOKED = CAST_DRMERR_EXT_API13_UNSPECIFIED + 1
const CAST_DRMERR_EXT_API13_LICENSE_EXPIRED = CAST_DRMERR_EXT_API13_UNSPECIFIED + 1
const CAST_DRMERR_EXT_API13_PROVIDE_KEY_RESPONSE_ERROR: ErrCode = 6616100

// Media Service ErrCode From Naitve
const MSERR_OK: NativeErrCode = 0
const MSERR_NO_MEMORY: NativeErrCode = MS_ERR_OFFSET + 9971 // no memory
const MSERR_INVALID_OPERATION: NativeErrCode = MS_ERR_OFFSET + 9942 // opertation not be permitted
const MSERR_INVALID_VAL: NativeErrCode = MS_ERR_OFFSET + 9943 // invalid argument
const MSERR_UNKNOWN: NativeErrCode = MS_ERR_OFFSET + 0x200 // unkown error.
const MSERR_SERVICE_DIED = MSERR_UNKNOWN + 1 // media service died
const MSERR_CREATE_REC_ENGINE_FAILED = MSERR_UNKNOWN + 2 // create recorder engine failed.
const MSERR_CREATE_PLAYER_ENGINE_FAILED = MSERR_UNKNOWN + 3 // create player engine failed.
const MSERR_CREATE_AVMETADATAHELPER_ENGINE_FAILED = MSERR_UNKNOWN + 4 // create avmetadatahelper engine failed.
const MSERR_INVALID_STATE = MSERR_UNKNOWN + 6 // the state is not support this operation.
const MSERR_UNSUPPORT = MSERR_UNKNOWN + 7 // unsupport interface.
const MSERR_UNSUPPORT_AUD_SRC_TYPE = MSERR_UNKNOWN + 8 // unsupport audio source type.
const MSERR_UNSUPPORT_AUD_SAMPLE_RATE = MSERR_UNKNOWN + 9 // unsupport audio sample rate.
const MSERR_UNSUPPORT_AUD_CHANNEL_NUM = MSERR_UNKNOWN + 10 // unsupport audio channel.
const MSERR_UNSUPPORT_AUD_ENC_TYPE = MSERR_UNKNOWN + 11 // unsupport audio encoder type.
const MSERR_UNSUPPORT_AUD_PARAMS = MSERR_UNKNOWN + 12 // unsupport audio params(other params).
const MSERR_UNSUPPORT_VID_SRC_TYPE = MSERR_UNKNOWN + 13 // unsupport video source type.
const MSERR_UNSUPPORT_VID_ENC_TYPE = MSERR_UNKNOWN + 14 // unsupport video encoder type.
const MSERR_UNSUPPORT_VID_PARAMS = MSERR_UNKNOWN + 15 // unsupport video params(other params).
const MSERR_UNSUPPORT_CONTAINER_TYPE = MSERR_UNKNOWN + 16 // unsupport container format type.
const MSERR_UNSUPPORT_PROTOCOL_TYPE = MSERR_UNKNOWN + 17 // unsupport protocol type.
const MSERR_UNSUPPORT_VID_DEC_TYPE = MSERR_UNKNOWN + 18 // unsupport video decoder type.
const MSERR_UNSUPPORT_AUD_DEC_TYPE = MSERR_UNKNOWN + 19 // unsupport audio decoder type.
const MSERR_UNSUPPORT_STREAM = MSERR_UNKNOWN + 20 // internal data stream error.
const MSERR_UNSUPPORT_FILE = MSERR_UNKNOWN + 21 // this appears to be a text file.
const MSERR_UNSUPPORT_SOURCE = MSERR_UNKNOWN + 22 // unsupport source type.
const MSERR_AUD_RENDER_FAILED = MSERR_UNKNOWN + 23 // audio render failed.
const MSERR_AUD_ENC_FAILED = MSERR_UNKNOWN + 24 // audio encode failed.
const MSERR_VID_ENC_FAILED = MSERR_UNKNOWN + 25 // video encode failed.
const MSERR_AUD_DEC_FAILED = MSERR_UNKNOWN + 26 // audio decode failed.
const MSERR_VID_DEC_FAILED = MSERR_UNKNOWN + 27 // video decode failed.
const MSERR_MUXER_FAILED = MSERR_UNKNOWN + 28 // stream avmuxer failed.
const MSERR_DEMUXER_FAILED = MSERR_UNKNOWN + 29 // stream demuxer or parser failed.
const MSERR_OPEN_FILE_FAILED = MSERR_UNKNOWN + 30 // open file failed.
const MSERR_FILE_ACCESS_FAILED = MSERR_UNKNOWN + 31 // read or write file failed.
const MSERR_START_FAILED = MSERR_UNKNOWN + 32 // audio/video start failed.
const MSERR_PAUSE_FAILED = MSERR_UNKNOWN + 33 // audio/video pause failed.
const MSERR_STOP_FAILED = MSERR_UNKNOWN + 34 // audio/video stop failed.
const MSERR_SEEK_FAILED = MSERR_UNKNOWN + 35 // audio/video seek failed.
const MSERR_NETWORK_TIMEOUT = MSERR_UNKNOWN + 36 // network timeout.
const MSERR_NOT_FIND_CONTAINER = MSERR_UNKNOWN + 37 // not find a demuxer.
const MSERR_EXTEND_START = MS_ERR_OFFSET + 0xF000 // extend err start.

// Cast ErrCode from Native
// Generic error
const ERROR_CODE_GENERIC_START: NativeErrCode = 1000
const ERROR_CODE_UNSPECIFIED = ERROR_CODE_GENERIC_START
const ERROR_CODE_REMOTE_ERROR = ERROR_CODE_GENERIC_START + 1
const ERROR_CODE_BEHIND_LIVE_WINDOW = ERROR_CODE_GENERIC_START + 2
const ERROR_CODE_TIMEOUT = ERROR_CODE_GENERIC_START + 3
const ERROR_CODE_FAILED_RUNTIME_CHECK = ERROR_CODE_GENERIC_START + 4
const ERROR_CODE_PLAYER_ERROR: NativeErrCode = 1100
const ERROR_CODE_SEEK_MODE_UNSUPPORTED = ERROR_CODE_PLAYER_ERROR + 1
const ERROR_CODE_ILLEGAL_SEEK_TARGET = ERROR_CODE_PLAYER_ERROR + 2
const ERROR_CODE_PLAY_MODE_UNSUPPORTED = ERROR_CODE_PLAYER_ERROR + 3
const ERROR_CODE_PLAY_SPEED_UNSUPPORTED = ERROR_CODE_PLAYER_ERROR + 4
const ERROR_CODE_DEVICE_MISSED = ERROR_CODE_PLAYER_ERROR + 5
const ERROR_CODE_INVALID_PARAM = ERROR_CODE_PLAYER_ERROR + 6
const ERROR_CODE_NO_MEMORY = ERROR_CODE_PLAYER_ERROR + 7
const ERROR_OPERATION_NOT_ALLOWED = ERROR_CODE_PLAYER_ERROR + 8
// Input/Output errors
const ERROR_CODE_IO_START: NativeErrCode = 2000
const ERROR_CODE_IO_UNSPECIFIED = ERROR_CODE_IO_START
const ERROR_CODE_IO_NETWORK_CONNECTION_FAILED = ERROR_CODE_IO_START + 1
const ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT = ERROR_CODE_IO_START + 2
const ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE = ERROR_CODE_IO_START + 3
const ERROR_CODE_IO_BAD_HTTP_STATUS = ERROR_CODE_IO_START + 4
const ERROR_CODE_IO_FILE_NOT_FOUND = ERROR_CODE_IO_START + 5
const ERROR_CODE_IO_NO_PERMISSION = ERROR_CODE_IO_START + 6
const ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED = ERROR_CODE_IO_START + 7
const ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE = ERROR_CODE_IO_START + 8
const ERROR_CODE_IO_NO_CONTENTS: NativeErrCode = 2100
const ERROR_CODE_IO_READ_ERROR = ERROR_CODE_IO_NO_CONTENTS + 1
const ERROR_CODE_IO_CONTENT_BUSY = ERROR_CODE_IO_NO_CONTENTS + 2
const ERROR_CODE_IO_CONTENT_EXPIRED = ERROR_CODE_IO_NO_CONTENTS + 3
const ERROR_CODE_IO_CONTENT_NON_ALLOWED_USE = ERROR_CODE_IO_NO_CONTENTS + 4
const ERROR_CODE_IO_CONTENT_CANNOT_VERIFIED = ERROR_CODE_IO_NO_CONTENTS + 5
const ERROR_CODE_IO_CONTENT_EXHAUSTED_ALLOWED_USES = ERROR_CODE_IO_NO_CONTENTS + 6
const ERROR_CODE_IO_NETWORK_PACKET_SENDING_FAILURE = ERROR_CODE_IO_NO_CONTENTS + 7
// Content parsing errors
const ERROR_CODE_PARSING_START: NativeErrCode = 3000
const ERROR_CODE_PARSING_UNSPECIFIED = ERROR_CODE_PARSING_START
const ERROR_CODE_PARSING_CONTAINER_MALFORMED = ERROR_CODE_PARSING_START + 1
const ERROR_CODE_PARSING_MANIFEST_MALFORMED = ERROR_CODE_PARSING_START + 2
const ERROR_CODE_PARSING_CONTAINER_UNSUPPORTED = ERROR_CODE_PARSING_START + 3
const ERROR_CODE_PARSING_MANIFEST_UNSUPPORTED = ERROR_CODE_PARSING_START + 4
// Decoding errors
const ERROR_CODE_DECODE_START: NativeErrCode = 4000
const ERROR_CODE_DECODE_UNSPECIFIED = ERROR_CODE_DECODE_START
const ERROR_CODE_DECODER_INIT_FAILED = ERROR_CODE_DECODE_START + 1
const ERROR_CODE_DECODER_QUERY_FAILED = ERROR_CODE_DECODE_START + 2
const ERROR_CODE_DECODING_FAILED = ERROR_CODE_DECODE_START + 3
const ERROR_CODE_DECODING_FORMAT_EXCEEDS_CAPABILITIES = ERROR_CODE_DECODE_START + 4
const ERROR_CODE_DECODING_FORMAT_UNSUPPORTED = ERROR_CODE_DECODE_START + 5
// AudioRender errors
const ERROR_CODE_AUDIO_RENDERS_START: NativeErrCode = 5000
const ERROR_CODE_AUDIO_RENDERS_UNSPECIFIED = ERROR_CODE_AUDIO_RENDERS_START
const ERROR_CODE_AUDIO_RENDERS_INIT_FAILED = ERROR_CODE_AUDIO_RENDERS_START + 1
const ERROR_CODE_AUDIO_RENDERS_WRITE_FAILED = ERROR_CODE_AUDIO_RENDERS_START + 2
// DRM errors
const ERROR_CODE_DRM_START: NativeErrCode = 6000
const ERROR_CODE_DRM_UNSPECIFIED = ERROR_CODE_DRM_START
const ERROR_CODE_DRM_SCHEME_UNSUPPORTED = ERROR_CODE_DRM_START + 1
const ERROR_CODE_DRM_PROVISIONING_FAILED = ERROR_CODE_DRM_START + 2
const ERROR_CODE_DRM_CONTENT_ERROR = ERROR_CODE_DRM_START + 3
const ERROR_CODE_DRM_LICENSE_ACQUISITION_FAILED = ERROR_CODE_DRM_START + 3
const ERROR_CODE_DRM_DISALLOWED_OPERATION = ERROR_CODE_DRM_START + 4
const ERROR_CODE_DRM_SYSTEM_ERROR = ERROR_CODE_DRM_START + 5
const ERROR_CODE_DRM_DEVICE_REVOKED = ERROR_CODE_DRM_START + 6
const ERROR_CODE_DRM_LICENSE_EXPIRED = ERROR_CODE_DRM_START + 7
const ERROR_CODE_DRM_PROVIDE_KEY_RESPONSE_ERROR = ERROR_CODE_DRM_START + 8
private let MS_ERRCODE_INFO_MAP = HashMap<NativeErrCode, String>(
    [
        (MSERR_OK, "success"),
        (MSERR_NO_MEMORY, "no memory"),
        (MSERR_INVALID_OPERATION, "operation not be permitted"),
        (MSERR_INVALID_VAL, "invalid argument"),
        (MSERR_UNKNOWN, "unkown error"),
        (MSERR_SERVICE_DIED, "media service died"),
        (MSERR_CREATE_REC_ENGINE_FAILED, "create recorder engine failed"),
        (MSERR_CREATE_PLAYER_ENGINE_FAILED, "create player engine failed"),
        (MSERR_CREATE_AVMETADATAHELPER_ENGINE_FAILED, "create avmetadatahelper engine failed"),
        (MSERR_INVALID_STATE, "the state is not support this operation"),
        (MSERR_UNSUPPORT, "unsupport interface"),
        (MSERR_UNSUPPORT_AUD_SRC_TYPE, "unsupport audio source type"),
        (MSERR_UNSUPPORT_AUD_SAMPLE_RATE, "unsupport audio sample rate"),
        (MSERR_UNSUPPORT_AUD_CHANNEL_NUM, "unsupport audio channel"),
        (MSERR_UNSUPPORT_AUD_ENC_TYPE, "unsupport audio encoder type"),
        (MSERR_UNSUPPORT_AUD_PARAMS, "unsupport audio params(other params)"),
        (MSERR_UNSUPPORT_VID_SRC_TYPE, "unsupport video source type"),
        (MSERR_UNSUPPORT_VID_ENC_TYPE, "unsupport video encoder type"),
        (MSERR_UNSUPPORT_VID_PARAMS, "unsupport video params(other params)"),
        (MSERR_UNSUPPORT_CONTAINER_TYPE, "unsupport container format type"),
        (MSERR_UNSUPPORT_PROTOCOL_TYPE, "unsupport protocol type"),
        (MSERR_UNSUPPORT_VID_DEC_TYPE, "unsupport video decoder type"),
        (MSERR_UNSUPPORT_AUD_DEC_TYPE, "unsupport audio decoder type"),
        (MSERR_UNSUPPORT_STREAM, "internal data stream error"),
        (MSERR_UNSUPPORT_FILE, "this appears to be a text file"),
        (MSERR_UNSUPPORT_SOURCE, "unsupport source type"),
        (MSERR_AUD_ENC_FAILED, "audio encode failed"),
        (MSERR_AUD_RENDER_FAILED, "audio render failed"),
        (MSERR_VID_ENC_FAILED, "video encode failed"),
        (MSERR_AUD_DEC_FAILED, "audio decode failed"),
        (MSERR_VID_DEC_FAILED, "video decode failed"),
        (MSERR_MUXER_FAILED, "stream avmuxer failed"),
        (MSERR_DEMUXER_FAILED, "stream demuxer or parser failed"),
        (MSERR_OPEN_FILE_FAILED, "open file failed"),
        (MSERR_FILE_ACCESS_FAILED, "read or write file failed"),
        (MSERR_START_FAILED, "audio or video start failed"),
        (MSERR_PAUSE_FAILED, "audio or video pause failed"),
        (MSERR_STOP_FAILED, "audio or video stop failed"),
        (MSERR_SEEK_FAILED, "audio or video seek failed"),
        (MSERR_NETWORK_TIMEOUT, "network timeout"),
        (MSERR_NOT_FIND_CONTAINER, "not find a demuxer"),
        (MSERR_EXTEND_START, "extend start error code")
    ]
)
private let MS_ERRCODE_TO_EXT_ERRCODE_API9 = HashMap<NativeErrCode, ErrCode>(
    [
        (MSERR_OK, MSERR_EXT_API9_OK),
        (MSERR_NO_MEMORY, MSERR_EXT_API9_NO_MEMORY),
        (MSERR_INVALID_OPERATION, MSERR_EXT_API9_OPERATE_NOT_PERMIT),
        (MSERR_INVALID_VAL, MSERR_EXT_API9_INVALID_PARAMETER),
        (MSERR_SERVICE_DIED, MSERR_EXT_API9_SERVICE_DIED),
        (MSERR_CREATE_REC_ENGINE_FAILED, MSERR_EXT_API9_NO_MEMORY),
        (MSERR_CREATE_PLAYER_ENGINE_FAILED, MSERR_EXT_API9_NO_MEMORY),
        (MSERR_INVALID_STATE, MSERR_EXT_API9_OPERATE_NOT_PERMIT),
        (MSERR_UNSUPPORT, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_UNSUPPORT_AUD_SRC_TYPE, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_UNSUPPORT_AUD_SAMPLE_RATE, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_UNSUPPORT_AUD_CHANNEL_NUM, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_UNSUPPORT_AUD_ENC_TYPE, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_UNSUPPORT_AUD_PARAMS, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_UNSUPPORT_VID_SRC_TYPE, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_UNSUPPORT_VID_ENC_TYPE, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_UNSUPPORT_VID_PARAMS, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_UNSUPPORT_CONTAINER_TYPE, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_UNSUPPORT_PROTOCOL_TYPE, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_UNSUPPORT_VID_DEC_TYPE, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_UNSUPPORT_AUD_DEC_TYPE, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_UNSUPPORT_STREAM, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_UNSUPPORT_FILE, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_UNSUPPORT_SOURCE, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_AUD_RENDER_FAILED, MSERR_EXT_API9_IO),
        (MSERR_AUD_ENC_FAILED, MSERR_EXT_API9_IO),
        (MSERR_VID_ENC_FAILED, MSERR_EXT_API9_IO),
        (MSERR_AUD_DEC_FAILED, MSERR_EXT_API9_IO),
        (MSERR_VID_DEC_FAILED, MSERR_EXT_API9_IO),
        (MSERR_MUXER_FAILED, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_DEMUXER_FAILED, MSERR_EXT_API9_UNSUPPORT_FORMAT),
        (MSERR_OPEN_FILE_FAILED, MSERR_EXT_API9_IO),
        (MSERR_FILE_ACCESS_FAILED, MSERR_EXT_API9_IO),
        (MSERR_START_FAILED, MSERR_EXT_API9_OPERATE_NOT_PERMIT),
        (MSERR_PAUSE_FAILED, MSERR_EXT_API9_OPERATE_NOT_PERMIT),
        (MSERR_STOP_FAILED, MSERR_EXT_API9_OPERATE_NOT_PERMIT),
        (MSERR_SEEK_FAILED, MSERR_EXT_API9_OPERATE_NOT_PERMIT),
        (MSERR_NETWORK_TIMEOUT, MSERR_EXT_API9_TIMEOUT),
        (MSERR_NOT_FIND_CONTAINER, MSERR_EXT_API9_INVALID_PARAMETER),
        (MSERR_UNKNOWN, MSERR_EXT_API9_IO)
    ]
)
private let CAST_ERRCODE_TO_EXT_ERRCODE_API13 = HashMap<NativeErrCode, ErrCode>(
    [
        // Generic error
        (ERROR_CODE_UNSPECIFIED, CAST_GENERICERR_EXT_API13_UNSPECIFIED),
        (ERROR_CODE_REMOTE_ERROR, CAST_GENERICERR_EXT_API13_REMOTE_ERROR),
        (ERROR_CODE_BEHIND_LIVE_WINDOW, CAST_GENERICERR_EXT_API13_BEHIND_LIVE_WINDOW),
        (ERROR_CODE_TIMEOUT, CAST_GENERICERR_EXT_API13_TIMEOUT),
        (ERROR_CODE_FAILED_RUNTIME_CHECK, CAST_GENERICERR_EXT_API13_FAILED_RUNTIME_CHECK),
        (ERROR_CODE_PLAYER_ERROR, CAST_GENERICERR_EXT_API13_PLAYER_ERROR),
        (ERROR_CODE_SEEK_MODE_UNSUPPORTED, CAST_GENERICERR_EXT_API13_SEEK_MODE_UNSUPPORTED),
        (ERROR_CODE_ILLEGAL_SEEK_TARGET, CAST_GENERICERR_EXT_API13_ILLEGAL_SEEK_TARGET),
        (ERROR_CODE_PLAY_MODE_UNSUPPORTED, CAST_GENERICERR_EXT_API13_PLAY_MODE_UNSUPPORTED),
        (ERROR_CODE_PLAY_SPEED_UNSUPPORTED, CAST_GENERICERR_EXT_API13_PLAY_SPEED_UNSUPPORTED),
        (ERROR_CODE_DEVICE_MISSED, CAST_GENERICERR_EXT_API13_DEVICE_MISSED),
        (ERROR_CODE_INVALID_PARAM, CAST_GENERICERR_EXT_API13_INVALID_PARAM),
        (ERROR_CODE_NO_MEMORY, CAST_GENERICERR_EXT_API13_NO_MEMORY),
        (ERROR_OPERATION_NOT_ALLOWED, CAST_GENERICERR_EXT_API13_OPERATION_NOT_ALLOWED),
        // Input/Output errors
        (ERROR_CODE_IO_UNSPECIFIED, CAST_IOERR_EXT_API13_UNSPECIFIED),
        (ERROR_CODE_IO_NETWORK_CONNECTION_FAILED, CAST_IOERR_EXT_API13_NETWORK_CONNECTION_FAILED),
        (ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT, CAST_IOERR_EXT_API13_NETWORK_CONNECTION_TIMEOUT),
        (ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE, CAST_IOERR_EXT_API13_INVALID_HTTP_CONTENT_TYPE),
        (ERROR_CODE_IO_BAD_HTTP_STATUS, CAST_IOERR_EXT_API13_BAD_HTTP_STATUS),
        (ERROR_CODE_IO_FILE_NOT_FOUND, CAST_IOERR_EXT_API13_FILE_NOT_FOUND),
        (ERROR_CODE_IO_NO_PERMISSION, CAST_IOERR_EXT_API13_NO_PERMISSION),
        (ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED, CAST_IOERR_EXT_API13_CLEARTEXT_NOT_PERMITTED),
        (ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE, CAST_IOERR_EXT_API13_READ_POSITION_OUT_OF_RANGE),
        (ERROR_CODE_IO_NO_CONTENTS, CAST_IOERR_EXT_API13_NO_CONTENTS),
        (ERROR_CODE_IO_READ_ERROR, CAST_IOERR_EXT_API13_READ_ERROR),
        (ERROR_CODE_IO_CONTENT_BUSY, CAST_IOERR_EXT_API13_CONTENT_BUSY),
        (ERROR_CODE_IO_CONTENT_EXPIRED, CAST_IOERR_EXT_API13_CONTENT_EXPIRED),
        (ERROR_CODE_IO_CONTENT_NON_ALLOWED_USE, CAST_IOERR_EXT_API13_CONTENT_NON_ALLOWED_USE),
        (ERROR_CODE_IO_CONTENT_CANNOT_VERIFIED, CAST_IOERR_EXT_API13_CONTENT_CANNOT_VERIFIED),
        (ERROR_CODE_IO_CONTENT_EXHAUSTED_ALLOWED_USES, CAST_IOERR_EXT_API13_CONTENT_EXHAUSTED_ALLOWED_USES),
        (ERROR_CODE_IO_NETWORK_PACKET_SENDING_FAILURE, CAST_IOERR_EXT_API13_NETWORK_PACKET_SENDING_FAILURE),
        // Content parsing errors
        (ERROR_CODE_PARSING_UNSPECIFIED, CAST_PARSINGERR_EXT_API13_UNSPECIFIED),
        (ERROR_CODE_PARSING_CONTAINER_MALFORMED, CAST_PARSINGERR_EXT_API13_CONTAINER_MALFORMED),
        (ERROR_CODE_PARSING_MANIFEST_MALFORMED, CAST_PARSINGERR_EXT_API13_MANIFEST_MALFORMED),
        (ERROR_CODE_PARSING_CONTAINER_UNSUPPORTED, CAST_PARSINGERR_EXT_API13_CONTAINER_UNSUPPORTED),
        (ERROR_CODE_PARSING_MANIFEST_UNSUPPORTED, CAST_PARSINGERR_EXT_API13_MANIFEST_UNSUPPORTED),
        // Decoding errors
        (ERROR_CODE_DECODE_UNSPECIFIED, CAST_DECODEERR_EXT_API13_UNSPECIFIED),
        (ERROR_CODE_DECODER_INIT_FAILED, CAST_DECODEERR_EXT_API13_INIT_FAILED),
        (ERROR_CODE_DECODER_QUERY_FAILED, CAST_DECODEERR_EXT_API13_QUERY_FAILED),
        (ERROR_CODE_DECODING_FAILED, CAST_DECODEERR_EXT_API13_FAILED),
        (ERROR_CODE_DECODING_FORMAT_EXCEEDS_CAPABILITIES, CAST_DECODEERR_EXT_API13_FORMAT_EXCEEDS_CAPABILITIES),
        (ERROR_CODE_DECODING_FORMAT_UNSUPPORTED, CAST_DECODEERR_EXT_API13_FORMAT_UNSUPPORTED),
        // AudioRender errors
        (ERROR_CODE_AUDIO_RENDERS_UNSPECIFIED, CAST_RENDERERR_EXT_API13_UNSPECIFIED),
        (ERROR_CODE_AUDIO_RENDERS_INIT_FAILED, CAST_RENDERERR_EXT_API13_INIT_FAILED),
        (ERROR_CODE_AUDIO_RENDERS_WRITE_FAILED, CAST_RENDERERR_EXT_API13_WRITE_FAILED),
        // DRM errors
        (ERROR_CODE_DRM_UNSPECIFIED, CAST_DRMERR_EXT_API13_UNSPECIFIED),
        (ERROR_CODE_DRM_SCHEME_UNSUPPORTED, CAST_DRMERR_EXT_API13_SCHEME_UNSUPPORTED),
        (ERROR_CODE_DRM_PROVISIONING_FAILED, CAST_DRMERR_EXT_API13_PROVISIONING_FAILED),
        (ERROR_CODE_DRM_CONTENT_ERROR, CAST_DRMERR_EXT_API13_CONTENT_ERROR),
        (ERROR_CODE_DRM_LICENSE_ACQUISITION_FAILED, CAST_DRMERR_EXT_API13_LICENSE_ACQUISITION_FAILED),
        (ERROR_CODE_DRM_DISALLOWED_OPERATION, CAST_DRMERR_EXT_API13_DISALLOWED_OPERATION),
        (ERROR_CODE_DRM_SYSTEM_ERROR, CAST_DRMERR_EXT_API13_SYSTEM_ERROR),
        (ERROR_CODE_DRM_DEVICE_REVOKED, CAST_DRMERR_EXT_API13_DEVICE_REVOKED),
        (ERROR_CODE_DRM_LICENSE_EXPIRED, CAST_DRMERR_EXT_API13_LICENSE_EXPIRED),
        (ERROR_CODE_DRM_PROVIDE_KEY_RESPONSE_ERROR, CAST_DRMERR_EXT_API13_PROVIDE_KEY_RESPONSE_ERROR)
    ]
)

protected func castControllerErrorCodeToBusinessError(errCode: NativeErrCode, errMessage: String): BusinessException {
    if (errCode >= MSERR_NO_MEMORY && errCode <= MSERR_EXTEND_START) {
        if (MS_ERRCODE_TO_EXT_ERRCODE_API9.contains(errCode)) {
            return BusinessException(MS_ERRCODE_TO_EXT_ERRCODE_API9[errCode], MS_ERRCODE_INFO_MAP[errCode])
        } else {
            LOGGER.warn("Can not match error code, use default");
            return BusinessException(
                MS_ERRCODE_TO_EXT_ERRCODE_API9[MSERR_EXT_API9_IO],
                MS_ERRCODE_INFO_MAP[MSERR_EXT_API9_IO]
            )
        }
    } else {
        if (CAST_ERRCODE_TO_EXT_ERRCODE_API13.contains(errCode)) {
            return BusinessException(CAST_ERRCODE_TO_EXT_ERRCODE_API13[errCode], errMessage)
        } else {
            LOGGER.warn("Can not match error code, use default");
            return BusinessException(CAST_ERRCODE_TO_EXT_ERRCODE_API13[CAST_GENERICERR_EXT_API13_UNSPECIFIED],
                errMessage)
        }
    }
}
