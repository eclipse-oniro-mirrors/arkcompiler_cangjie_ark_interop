# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

config("ark_interop_config") {
    include_dirs = [ "//foundation/arkui/napi" ]
    cflags = [
        "-std=c++17",
        "-Wno-gnu-zero-variadic-macro-arguments",
        "-fvisibility-inlines-hidden",
        "-fvisibility=hidden",
        "-fno-exceptions",
        "-fno-rtti",
        "-fmerge-all-constants",
        "-ffunction-sections",
        "-Wno-unused-private-field",
        "-D_FORTIFY_SOURCE=2",
        "-fstack-protector-all",
        "-fstack-protector-strong",
    ]
    if (current_os == "ohos") {
        cflags += [ "-fPIC" ]
        defines = [
            "__LINUX__",
            "__OHOS__=1",
        ]
    } else if (current_os == "linux") {
        defines = [ "__LINUX__" ]
    } else if (current_os == "mingw") {
        defines = [ "__WINDOWS__" ]
    }
}

ohos_shared_library("ark_interop_loader") {
    part_name = "cangjie_api"
    subsystem_name = "arkcompiler"
    relative_install_dir = "module"

    configs = [ ":ark_interop_config" ]

    defines = []
    if (current_cpu == "arm64") {
        defines += [
            "USE_LIBS_ARM64"
        ]
    } else if (current_cpu == "arm") {
        defines += [
            "USE_LIBS_ARM"
        ]
    } else if (current_cpu == "x86_64") {
        defines += [
            "USE_LIBS_x86_64"
        ]
    } else {
        print("unsupported cpu ${current_cpu}")
        assert(false)
    }

    include_dirs = [
        "//interface/sdk_c/hiviewdfx/hilog/include",
        "//interface/sdk_c/third_party/node/src",
        "//foundation/arkui/napi",
        "//arkcompiler/ets_runtime",
        "//third_party/libuv/include",
        "//arkcompiler/runtime_core",
    ]

    sources = [
        "ark_interop_loader.cpp",
        "cj_envsetup.cpp",
    ]

    ldflags = [
        "-Wl,--push-state,-Bstatic",
        "-lc++", "-lc++abi", "-lunwind",
        "-Wl,--pop-state",
    ]

    _toolchain_name = get_label_info(current_toolchain, "name")

    deps = [
        "//interface/sdk_c/hiviewdfx/hilog:libhilog_ndk_${_toolchain_name}__ndk_shlib",
        "//interface/sdk_c/arkui/napi:libnapi_ndk_${_toolchain_name}__ndk_shlib",
    ]

    output_extension = "so"
}
