

import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
import fs from '@ohos.file.fs';
import {
  basePath,
  defaultSoFileName,
  inaccessibleFileName,
  invalidFileName0,
  invalidFileName1,
  invalidFileName2,
  nonExistingFileName,
  relativePathRoot
} from '../../../main/ets/entryability/paths';


export default function TestAbsolutePath() {
  describe('TestAbsolutePath', () => {
    beforeAll(() => {
    })
    beforeEach(() => {
    })
    afterEach(() => {
    })
    afterAll(() => {
    })
    /* 
    * @tc.number    : Sub_Cangjie_arkts_interop_TestAbsolutePath_0200
    * @tc.name      : test01
    * @tc.desc      : Tests that loading a non-existent shared library returns undefined.
    * @tc.size      : MediumTest
    * @tc.type      : Function
    * @tc.level     : Level 0
    */
    it('test01', 0, async () => {
      const nonExistingFilePath = `${relativePathRoot}/${nonExistingFileName}`;
      const soFileExists = await fs.access(nonExistingFilePath);
      expect(soFileExists).assertFalse();
      expect(nonExistingFilePath === undefined).assertFalse();
    })
    // 全局requireCJLib，使用相对路径，路径空字符串
    /* 
    * @tc.number    : Sub_Cangjie_arkts_interop_TestAbsolutePath_0300
    * @tc.name      : test02
    * @tc.desc      : Tests loading an invalid shared library path, expecting it to return undefined.
    * @tc.size      : MediumTest
    * @tc.type      : Function
    * @tc.level     : Level 0
    */
    it('test02', 0, () => {
      const invalidFilePath = `${relativePathRoot}/${invalidFileName0}`;
      expect(invalidFilePath === undefined).assertFalse();
    })
    /* 
    * @tc.number    : Sub_Cangjie_arkts_interop_TestAbsolutePath_0400
    * @tc.name      : test03
    * @tc.desc      : Tests loading an invalid shared library file, expecting it to return undefined.
    * @tc.size      : MediumTest
    * @tc.type      : Function
    * @tc.level     : Level 0
    */
    it('test03', 0, () => {
      const invalidFilePath = `${relativePathRoot}/${invalidFileName1}`;
      expect(invalidFilePath === undefined).assertFalse();
    })
    /* 
    * @tc.number    : Sub_Cangjie_arkts_interop_TestAbsolutePath_0500
    * @tc.name      : test04
    * @tc.desc      : Tests loading an invalid shared library file, expecting it to return undefined.
    * @tc.size      : MediumTest
    * @tc.type      : Function
    * @tc.level     : Level 0
    */
    it('test04', 0, () => {
      const invalidFilePath = `${relativePathRoot}/${invalidFileName2}`;
      expect(invalidFilePath === undefined).assertFalse();
    })
    // 相对路径存在，但无法加载
    /* 
    * @tc.number    : Sub_Cangjie_arkts_interop_TestAbsolutePath_0600
    * @tc.name      : test05
    * @tc.desc      : Tests loading an inaccessible shared library, expecting it to return undefined.
    * @tc.size      : MediumTest
    * @tc.type      : Function
    * @tc.level     : Level 0
    */
    it('test05', 0, async () => {
      let inaccessibleFilePath = `${basePath}/${inaccessibleFileName}`;
      let soFileExists = await fs.access(inaccessibleFilePath);
      expect(soFileExists).assertFalse();
      expect(inaccessibleFilePath === undefined).assertFalse();
    })
  })
}