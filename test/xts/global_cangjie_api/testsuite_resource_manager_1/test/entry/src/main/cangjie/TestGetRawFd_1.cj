/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
package ohos_app_cangjie_entry

import std.unittest.*
import std.unittest.common.*
import std.unittest.testmacro.*
import std.collection.*
import ohos.base.*
import stdx.encoding.json.*
import ohos.arkui.state_macro_manage.r
import ohos.resource_manager.AppResource
import kit.PerformanceAnalysisKit.Hilog
import ohos.business_exception.*
import ohos.resource_manager.ArgsValueType
import ohos.resource_manager.ScreenDensity
import ohos.resource_manager.NumberValueType

@Test
class TestGetRawFd_1 {
    /*
     * @tc.number    : Sub_Cangjie_ResourceManager_GetRawFd_0100
     * @tc.name      : TestCase_1
     * @tc.desc      : get rawFd by path="".
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    @TestCase
    @Tag[APILevel12, TestLevel0]
    func TestCase_1(): Unit {
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_1 begins.")
        Hilog.info(0u32, "CangjieTest", "fail to get RawFd")
        try {
            getResourceManager().getRawFd("")
            @Expect("assertion#1771: not throw", "fail to get RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }
        Hilog.info(0u32, "CangjieTest", "fail to close RawFd")
        try {
            getResourceManager().closeRawFd("")
            @Expect("assertion#1772: not throw", "fail to close RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_1 ends.")
    }

    /*
     * @tc.number    : Sub_Cangjie_ResourceManager_GetRawFd_0200
     * @tc.name      : TestCase_2
     * @tc.desc      : get rawFd by path="\0".
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    @TestCase
    @Tag[APILevel12, TestLevel0]
    func TestCase_2(): Unit {
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_2 begins.")
        Hilog.info(0u32, "CangjieTest", "fail to get RawFd")
        try {
            getResourceManager().getRawFd("\0")
            @Expect("assertion#1773: not throw", "fail to get RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }
        Hilog.info(0u32, "CangjieTest", "fail to close RawFd")
        try {
            getResourceManager().closeRawFd("\0")
            @Expect("assertion#1774: not throw", "fail to close RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_2 ends.")
    }

    /*
     * @tc.number    : Sub_Cangjie_ResourceManager_GetRawFd_0300
     * @tc.name      : TestCase_3
     * @tc.desc      : get rawFd by path="non_existing_rawfile_path_0".
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    @TestCase
    @Tag[APILevel12, TestLevel0]
    func TestCase_3(): Unit {
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_3 begins.")
        Hilog.info(0u32, "CangjieTest", "fail to get RawFd")
        try {
            getResourceManager().getRawFd("non_existing_rawfile_path_0")
            @Expect("assertion#1775: not throw", "fail to get RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }
        Hilog.info(0u32, "CangjieTest", "fail to close RawFd")
        try {
            getResourceManager().closeRawFd("non_existing_rawfile_path_0")
            @Expect("assertion#1776: not throw", "fail to close RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_3 ends.")
    }

    /*
     * @tc.number    : Sub_Cangjie_ResourceManager_GetRawFd_0400
     * @tc.name      : TestCase_4
     * @tc.desc      : get rawFd by path="aaaaa/bbbbb".
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    @TestCase
    @Tag[APILevel12, TestLevel0]
    func TestCase_4(): Unit {
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_4 begins.")
        Hilog.info(0u32, "CangjieTest", "fail to get RawFd")
        try {
            getResourceManager().getRawFd("aaaaa/bbbbb")
            @Expect("assertion#1777: not throw", "fail to get RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }
        Hilog.info(0u32, "CangjieTest", "fail to close RawFd")
        try {
            getResourceManager().closeRawFd("aaaaa/bbbbb")
            @Expect("assertion#1778: not throw", "fail to close RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_4 ends.")
    }

    /*
     * @tc.number    : Sub_Cangjie_ResourceManager_GetRawFd_0500
     * @tc.name      : TestCase_5
     * @tc.desc      : get rawFd by path="//////".
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    @TestCase
    @Tag[APILevel12, TestLevel0]
    func TestCase_5(): Unit {
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_5 begins.")
        Hilog.info(0u32, "CangjieTest", "fail to get RawFd")
        try {
            getResourceManager().getRawFd("//////")
            @Expect("assertion#1779: not throw", "fail to get RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }
        Hilog.info(0u32, "CangjieTest", "fail to close RawFd")
        try {
            getResourceManager().closeRawFd("//////")
            @Expect("assertion#1780: not throw", "fail to close RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_5 ends.")
    }

    /*
     * @tc.number    : Sub_Cangjie_ResourceManager_GetRawFd_0600
     * @tc.name      : TestCase_6
     * @tc.desc      : get rawFd by path="\\\\".
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    @TestCase
    @Tag[APILevel12, TestLevel0]
    func TestCase_6(): Unit {
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_6 begins.")
        Hilog.info(0u32, "CangjieTest", "fail to get RawFd")
        try {
            getResourceManager().getRawFd("\\\\")
            @Expect("assertion#1781: not throw", "fail to get RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }
        Hilog.info(0u32, "CangjieTest", "fail to close RawFd")
        try {
            getResourceManager().closeRawFd("\\\\")
            @Expect("assertion#1782: not throw", "fail to close RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_6 ends.")
    }

    /*
     * @tc.number    : Sub_Cangjie_ResourceManager_GetRawFd_0700
     * @tc.name      : TestCase_7
     * @tc.desc      : get rawFd by path="test.txt".
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    @TestCase
    @Tag[APILevel12, TestLevel0]
    func TestCase_7(): Unit {
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_7 begins.")
        Hilog.info(0u32, "CangjieTest", "define local variable rawFd")
        let rawFd = getResourceManager().getRawFd("test.txt")
        @Assert(rawFd.length, 19i64)
        Hilog.info(0u32, "CangjieTest", "close")
        getResourceManager().closeRawFd("test.txt")
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_7 ends.")
    }

    /*
     * @tc.number    : Sub_Cangjie_ResourceManager_GetRawFd_0800
     * @tc.name      : TestCase_8
     * @tc.desc      : get rawFd by path="test1.txt".
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    @TestCase
    @Tag[APILevel12, TestLevel0]
    func TestCase_8(): Unit {
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_8 begins.")
        Hilog.info(0u32, "CangjieTest", "define local variable rawFd")
        // let rawFd = getResourceManager().getRawFd("test1.txt")
        try {
            getResourceManager().getRawFd("test1.txt")
            @Expect("assertion#1781: not throw", "fail to get RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }
        Hilog.info(0u32, "CangjieTest", "fail to close RawFd")
        try {
            getResourceManager().closeRawFd("test1.txt")
            @Expect("assertion#1782: not throw", "fail to close RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }  
        // @Assert(rawFd.length, 16i64)
        // Hilog.info(0u32, "CangjieTest", "close")
        // getResourceManager().closeRawFd("t1.txt")
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_8 ends.")
    }

    /*
     * @tc.number    : Sub_Cangjie_ResourceManager_GetRawFd_0900
     * @tc.name      : TestCase_9tes
     * @tc.desc      : get rawFd by path="dir0/test1.txt".
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    @TestCase
    @Tag[APILevel12, TestLevel0]
    func TestCase_9(): Unit {
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_9 begins.")
        Hilog.info(0u32, "CangjieTest", "define local variable rawFd")
        // let rawFd = getResourceManager().getRawFd("dir0/test1.txt")
        // @Assert(rawFd.length, 16i64)
        // Hilog.info(0u32, "CangjieTest", "close")
        // getResourceManager().closeRawFd("dir0/test1.txt")
        try {
            getResourceManager().getRawFd("dir0/test1.txt")
            @Expect("assertion#1781: not throw", "fail to get RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }
        Hilog.info(0u32, "CangjieTest", "fail to close RawFd")
        try {
            getResourceManager().closeRawFd("dir0/test1.txt")
            @Expect("assertion#1782: not throw", "fail to close RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }          
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_9 ends.")
    }

    /*
     * @tc.number    : Sub_Cangjie_ResourceManager_GetRawFd_1000
     * @tc.name      : TestCase_10
     * @tc.desc      : get rawFd by path="dir0/dir0/test1.txt".
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    @TestCase
    @Tag[APILevel12, TestLevel0]
    func TestCase_10(): Unit {
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_10 begins.")
        Hilog.info(0u32, "CangjieTest", "define local variable rawFd")
        // let rawFd = getResourceManager().getRawFd("dir0/dir0/test1.txt")
        // @Assert(rawFd.length, 16i64)
        // Hilog.info(0u32, "CangjieTest", "close")
        // getResourceManager().closeRawFd("dir0/dir0/test1.txt")
        try {
            getResourceManager().getRawFd("dir0/dir0/test1.txt")
            @Expect("assertion#1781: not throw", "fail to get RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }
        Hilog.info(0u32, "CangjieTest", "fail to close RawFd")
        try {
            getResourceManager().closeRawFd("dir0/dir0/test1.txt")
            @Expect("assertion#1782: not throw", "fail to close RawFd")
        } catch (e: BusinessException) {
            @Expect(e.message, "Invalid relative path.")
            @Expect(e.code, 9001005i32)
        }  
        Hilog.info(0u32, "CangjieTest", "testcase TestCase_10 ends.")
    }
}
