/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ohos_app_cangjie_entry

import std.unittest.testmacro.{Test, TestCase, Expect}
import ohos.security.crypto_framework.{createSymKeyGenerator}
import std.unittest.testmacro.*
import std.unittest.*
import std.unittest.common.*
import ohos.ui_test.*
import ohos.base.*

@Test
class Test_SymKeyGenerator_02 {

    /*
    * @tc.number    : Sub_Cangjie_Crypto_Test_SymKeyGenerator_02_0100
    * @tc.name      : test_symkeygenerator_01
    * @tc.desc      : test Crypto test_symkeygenerator_01
    * @tc.size      : MediumTest
    * @tc.type      : Function
    * @tc.level     : Level 0
    */
    @TestCase
    @Tag[APILevel12, TestLevel0]

        func test_symkeygenerator_01(): Unit {
        let skg = createSymKeyGenerator("AES256")
        @Expect(skg.algName, "AES256")
    }


    /*
    * @tc.number    : Sub_Cangjie_Crypto_Test_SymKeyGenerator_02_0200
    * @tc.name      : test_symkeygenerator_02
    * @tc.desc      : test Crypto test_symkeygenerator_02
    * @tc.size      : MediumTest
    * @tc.type      : Function
    * @tc.level     : Level 0
    */
    @TestCase
    @Tag[APILevel12, TestLevel0]

        func test_symkeygenerator_02(): Unit {
        let skg = createSymKeyGenerator("3DES192")
        @Expect(skg.algName, "3DES192")
    }


    /*
    * @tc.number    : Sub_Cangjie_Crypto_Test_SymKeyGenerator_02_0300
    * @tc.name      : test_symkeygenerator_03
    * @tc.desc      : test Crypto test_symkeygenerator_03
    * @tc.size      : MediumTest
    * @tc.type      : Function
    * @tc.level     : Level 0
    */
    @TestCase
    @Tag[APILevel12, TestLevel0]

        func test_symkeygenerator_03(): Unit {
        let skg = createSymKeyGenerator("SM4_128")
        @Expect(skg.algName, "SM4_128")
    }


    /*
    * @tc.number    : Sub_Cangjie_Crypto_Test_SymKeyGenerator_02_0400
    * @tc.name      : test_symkeygenerator_04
    * @tc.desc      : test Crypto test_symkeygenerator_04
    * @tc.size      : MediumTest
    * @tc.type      : Function
    * @tc.level     : Level 0
    */
    @TestCase
    @Tag[APILevel12, TestLevel0]

        func test_symkeygenerator_04(): Unit {
        let skg = createSymKeyGenerator("HMAC|SHA1")
        @Expect(skg.algName, "HMAC|SHA1")
    }
}
