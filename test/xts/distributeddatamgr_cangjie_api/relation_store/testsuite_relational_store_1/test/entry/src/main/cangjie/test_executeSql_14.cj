/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ohos_app_cangjie_entry

import std.unittest.testmacro.*
import std.unittest.*
import std.unittest.common.*
import ohos.ui_test.*
import ohos.data.relational_store.*
import ohos.data.relational_store.SecurityLevel
import ohos.data.relational_store.ValueType as RelationalStoreValueType
import std.math.*
import std.collection.{HashMap}
import ohos.business_exception.{BusinessException}

@Test
class Test_executeSql_14 {
    var _rdbStore: Option<RdbStore> = None
    prop rdbStore: RdbStore {
        get() {
            match (_rdbStore) {
                case Some(rdbStore) => rdbStore
                case None =>
                    let stageContext = getAbilityContext()
                    _rdbStore = getRdbStore(stageContext,
                StoreConfig(SecurityLevel.S2, name: "RdbTest.db", encrypt: true, dataGroupId: "",
                    customDir: "valid modifyTime", rootDir: "rootDir", autoCleanDirtyData: true, allowRebuild: false,
                    isReadOnly: false, pluginLibs: ["pluginLibs"], cryptoParam: CryptoParam(), vector: false,
                    tokenizer: Tokenizer.NoneTokenizer, persist: true, enableSemanticIndex: false))
                    _rdbStore.getOrThrow()
            }
        }
    }
    public override func afterAll(): Unit {
        match (_rdbStore) {
            case None => ()
            case Some(_) =>
                let stageContext = getAbilityContext()
                deleteRdbStore(stageContext, "RdbTest.db")
        }
    }

    /*
    * @tc.number    : Sub_Cangjie_RelationStore_Test_executeSql_14_0100
    * @tc.name      : test_executesql_01
    * @tc.desc      : test RelationStore test_executesql_01
    * @tc.size      : MediumTest
    * @tc.type      : Function
    * @tc.level     : Level 0
    */
    @TestCase
    @Tag[APILevel12, TestLevel0]
    func test_executesql_01(): Unit {
        rdbStore.executeSql(
            "CREATE TABLE EMPLOYEE(ID int NOT NULL, NAME varchar(255) NOT NULL, AGE int, SALARY float NOT NULL, CODES Bit NOT NULL, PRIMARY KEY (Id))"
        )
        try {
            rdbStore.executeSql(
                "CREATE TABLE EMPLOYEE(ID int NOT NULL, NAME varchar(255) NOT NULL, AGE int, SALARY float NOT NULL, CODES Bit NOT NULL, PRIMARY KEY (Id))"
            )
            @Expect(false)
        } catch (e: BusinessException) {
            @Expect(e.code, 14800021)
            @Expect(e.message, "RdbStore beginTransaction failed: SQLite: Generic error.")
        }
        rdbStore.executeSql("DROP TABLE EMPLOYEE")
    }


    /*
    * @tc.number    : Sub_Cangjie_RelationStore_Test_executeSql_14_0200
    * @tc.name      : test_executesql_02
    * @tc.desc      : test RelationStore test_executesql_02
    * @tc.size      : MediumTest
    * @tc.type      : Function
    * @tc.level     : Level 0
    */
    @TestCase
    @Tag[APILevel12, TestLevel0]
    func test_executesql_02(): Unit {
        rdbStore.executeSql(
            "CREATE TABLE EMPLOYEE(ID int NOT NULL, NAME varchar(255) NOT NULL, AGE int, SALARY float NOT NULL, CODES Bit NOT NULL, PRIMARY KEY (Id))"
        )
        try {
            rdbStore.executeSql("CREATE TABLE EMPLOYEE(ID int NOT NULL,PRIMARY KEY (Id))")
            @Expect(false)
        } catch (e: BusinessException) {
            @Expect(e.code, 14800021)
            @Expect(e.message, "RdbStore beginTransaction failed: SQLite: Generic error.")
        }
        rdbStore.executeSql("DROP TABLE EMPLOYEE")
    }


    /*
    * @tc.number    : Sub_Cangjie_RelationStore_Test_executeSql_14_0300
    * @tc.name      : test_executesql_03
    * @tc.desc      : test RelationStore test_executesql_03
    * @tc.size      : MediumTest
    * @tc.type      : Function
    * @tc.level     : Level 0
    */
    @TestCase
    @Tag[APILevel12, TestLevel0]
    func test_executesql_03(): Unit {
        rdbStore.executeSql(
            "CREATE TABLE EMPLOYEE(ID int NOT NULL, NAME varchar(255) NOT NULL, AGE int, SALARY float NOT NULL, CODES Bit NOT NULL, PRIMARY KEY (Id))"
        )
        rdbStore.executeSql("CREATE TABLE EMPLOYEE1(ID int NOT NULL,PRIMARY KEY (Id))")
        for (i in 1..101) {
            var values = HashMap<String, RelationalStoreValueType>()
            values.add("ID", RelationalStoreValueType.Integer(i))
            values.add("NAME", RelationalStoreValueType.StringValue("Lisa"))
            values.add("AGE", RelationalStoreValueType.Integer(i + 1))
            values.add("SALARY", RelationalStoreValueType.Double(Float64(i) + 0.25))
            values.add("CODES", RelationalStoreValueType.Boolean(true))
            rdbStore.insert("EMPLOYEE", values)
        }
        for (i in 101..201) {
            var values = HashMap<String, RelationalStoreValueType>()
            values.add("ID", RelationalStoreValueType.Integer(i))
            rdbStore.insert("EMPLOYEE1", values)
        }
        let predicates = RdbPredicates("EMPLOYEE")
        let resultSet = rdbStore.query(predicates, columns:["ID", "NAME", "AGE", "SALARY", "CODES"])
        @Expect(resultSet.rowCount, 100)
        let predicates1 = RdbPredicates("EMPLOYEE1")
        let resultSet1 = rdbStore.query(predicates1, columns:["ID"])
        @Expect(resultSet1.rowCount, 100)
        rdbStore.executeSql("DROP TABLE EMPLOYEE")
        rdbStore.executeSql("DROP TABLE EMPLOYEE1")
    }
}
