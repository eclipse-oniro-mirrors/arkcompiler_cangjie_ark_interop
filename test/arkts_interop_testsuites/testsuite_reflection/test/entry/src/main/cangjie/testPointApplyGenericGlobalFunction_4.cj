/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ohos_app_cangjie_entry

import std.unittest.*
import std.unittest.common.*
import std.unittest.testmacro.*
import std.reflect.*
import dependency.*
import std.collection.*
import ohos.uniformTypeDescriptor.*
import ohos.ark_interop.*
import ohos.state_manage.AppStorage
import ohos.ability_delegator_registry.AbilityDelegatorRegistry
import ohos.ability.Want
import ohos.vibrator.*
import ohos.file_fs.*
import std.math.numeric.BigInt
import ohos.ability.*
import std.math.MathExtension
import ohos.bundle_manager.*
import ohos.base.*
import ohos.ui_test.*
import stdx.encoding.json.*

@Test
class testPointApplyGenericGlobalFunction_4 {
    @TestCase
    func TestCase_451(): Unit {
        logger.info("testcase TestCase_451 begins.")
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_16")[0i64].apply([], [1u8])
            @Expect("assertion#12570: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_16")[0i64].apply([TypeInfo.of<Float32>()], [1u8])
            @Expect("assertion#12571: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_16")[0i64].apply([], [])
            @Expect("assertion#12572: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_16")[0i64].apply([TypeInfo.of<Float32>()], [])
            @Expect("assertion#12573: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_16")[0i64].apply([], [])
            @Expect("assertion#12574: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_16")[0i64].apply([TypeInfo.of<Float32>()], [])
            @Expect("assertion#12575: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_16")[0i64].apply([], [1u8, 114.514000f64])
            @Expect("assertion#12576: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_16")[0i64].apply([TypeInfo.of<Float32>()], [1u8, 114.514000f64])
            @Expect("assertion#12577: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_16")[0i64].apply([], [114.514000f64])
            @Expect("assertion#12578: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_16")[0i64].apply([TypeInfo.of<Float32>()], [114.514000f64])
            @Expect("assertion#12579: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("testcase TestCase_451 ends.")
    }

    @TestCase
    func TestCase_452(): Unit {
        logger.info("testcase TestCase_452 begins.")
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_17")[0i64].apply([], [1u16])
            @Expect("assertion#12580: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_17")[0i64].apply([TypeInfo.of<Float32>()], [1u16])
            @Expect("assertion#12581: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_17")[0i64].apply([], [])
            @Expect("assertion#12582: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_17")[0i64].apply([TypeInfo.of<Float32>()], [])
            @Expect("assertion#12583: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_17")[0i64].apply([], [])
            @Expect("assertion#12584: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_17")[0i64].apply([TypeInfo.of<Float32>()], [])
            @Expect("assertion#12585: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_17")[0i64].apply([], [1u16, 114.514000f64])
            @Expect("assertion#12586: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_17")[0i64].apply([TypeInfo.of<Float32>()], [1u16, 114.514000f64])
            @Expect("assertion#12587: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_17")[0i64].apply([], [114.514000f64])
            @Expect("assertion#12588: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_17")[0i64].apply([TypeInfo.of<Float32>()], [114.514000f64])
            @Expect("assertion#12589: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("testcase TestCase_452 ends.")
    }

    @TestCase
    func TestCase_453(): Unit {
        logger.info("testcase TestCase_453 begins.")
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_18")[0i64].apply([], [1u32])
            @Expect("assertion#12590: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_18")[0i64].apply([TypeInfo.of<Float32>()], [1u32])
            @Expect("assertion#12591: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_18")[0i64].apply([], [])
            @Expect("assertion#12592: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_18")[0i64].apply([TypeInfo.of<Float32>()], [])
            @Expect("assertion#12593: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_18")[0i64].apply([], [])
            @Expect("assertion#12594: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_18")[0i64].apply([TypeInfo.of<Float32>()], [])
            @Expect("assertion#12595: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_18")[0i64].apply([], [1u32, 114.514000f64])
            @Expect("assertion#12596: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_18")[0i64].apply([TypeInfo.of<Float32>()], [1u32, 114.514000f64])
            @Expect("assertion#12597: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_18")[0i64].apply([], [114.514000f64])
            @Expect("assertion#12598: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_18")[0i64].apply([TypeInfo.of<Float32>()], [114.514000f64])
            @Expect("assertion#12599: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("testcase TestCase_453 ends.")
    }

    @TestCase
    func TestCase_454(): Unit {
        logger.info("testcase TestCase_454 begins.")
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_19")[0i64].apply([], [123u64])
            @Expect("assertion#12600: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_19")[0i64].apply([TypeInfo.of<Float32>()], [123u64])
            @Expect("assertion#12601: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_19")[0i64].apply([], [])
            @Expect("assertion#12602: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_19")[0i64].apply([TypeInfo.of<Float32>()], [])
            @Expect("assertion#12603: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_19")[0i64].apply([], [])
            @Expect("assertion#12604: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_19")[0i64].apply([TypeInfo.of<Float32>()], [])
            @Expect("assertion#12605: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_19")[0i64].apply([], [123u64, 114.514000f64])
            @Expect("assertion#12606: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_19")[0i64].apply([TypeInfo.of<Float32>()], [123u64, 114.514000f64])
            @Expect("assertion#12607: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_19")[0i64].apply([], [114.514000f64])
            @Expect("assertion#12608: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_19")[0i64].apply([TypeInfo.of<Float32>()], [114.514000f64])
            @Expect("assertion#12609: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("testcase TestCase_454 ends.")
    }

    @TestCase
    func TestCase_455(): Unit {
        logger.info("testcase TestCase_455 begins.")
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_20")[0i64].apply([], [114.514000f32])
            @Expect("assertion#12610: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_20")[0i64].apply([TypeInfo.of<Float32>()], [114.514000f32])
            @Expect("assertion#12611: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_20")[0i64].apply([], [])
            @Expect("assertion#12612: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_20")[0i64].apply([TypeInfo.of<Float32>()], [])
            @Expect("assertion#12613: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_20")[0i64].apply([], [])
            @Expect("assertion#12614: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_20")[0i64].apply([TypeInfo.of<Float32>()], [])
            @Expect("assertion#12615: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_20")[0i64].apply([], [114.514000f32, 114.514000f64])
            @Expect("assertion#12616: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo
                .getFunctions("globalFunction_20")[0i64]
                .apply([TypeInfo.of<Float32>()], [114.514000f32, 114.514000f64])
            @Expect("assertion#12617: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_20")[0i64].apply([], [()])
            @Expect("assertion#12618: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("非泛型函数指定了类型实参列表")
        try {
            moduleInfo.getFunctions("globalFunction_20")[0i64].apply([TypeInfo.of<Float32>()], [()])
            @Expect("assertion#12619: not throw", "非泛型函数指定了类型实参列表")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The function cannot be applied with `genericTypeArgs`.")
        }
        logger.info("testcase TestCase_455 ends.")
    }
}
