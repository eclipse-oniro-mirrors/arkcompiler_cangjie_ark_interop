/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ohos_app_cangjie_entry

import std.unittest.*
import std.unittest.common.*
import std.unittest.testmacro.*
import std.reflect.*
import dependency.*
import std.collection.*
import ohos.uniformTypeDescriptor.*
import ohos.ark_interop.*
import ohos.state_manage.AppStorage
import ohos.ability_delegator_registry.AbilityDelegatorRegistry
import ohos.ability.Want
import ohos.vibrator.*
import ohos.file_fs.*
import std.math.numeric.BigInt
import ohos.ability.*
import std.math.MathExtension
import ohos.bundle_manager.*
import ohos.base.*
import ohos.ui_test.*
import stdx.encoding.json.*

@Test
class testGetInstanceFunctions_StandardStructType_22 {
    @TestCase
    func TestCase_214(): Unit {
        logger.info("testcase TestCase_214 begins.")
        @Expect(1i64, TypeInfo.of<StandardStructType<Unit, UInt16, Unit>>().getInstanceFunctions("classInstanceMemberFunction_215").size)
        logger.info("成功调用")
        TypeInfo
            .of<StandardStructType<Unit, UInt16, Unit>>()
            .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
            .apply(
                StandardStructType<Unit, UInt16, Unit>(),
                [TypeInfo.of<Float64>(), TypeInfo.of<Int16>(), TypeInfo.of<UInt32>()],
                [GenericStructWith2TypeParameters<Unit, Unit>()]
            )
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(1i64, [TypeInfo.of<Int16>(), TypeInfo.of<UInt32>()],
                    [GenericStructWith2TypeParameters<Unit, Unit>()])
            @Expect("assertion#6818: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply("hello", [TypeInfo.of<Float64>(), TypeInfo.of<Int16>()],
                    [GenericStructWith2TypeParameters<Unit, Unit>()])
            @Expect("assertion#6819: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("实参个数与形参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(1i64, [TypeInfo.of<Float64>(), TypeInfo.of<Int16>(), TypeInfo.of<UInt32>()], [])
            @Expect("assertion#6820: not throw", "实参个数与形参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(StandardStructType<Unit, UInt16, Unit>(), [TypeInfo.of<Int16>(), TypeInfo.of<UInt32>()], [])
            @Expect("assertion#6821: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply("hello",
                    [TypeInfo.of<Float64>(), TypeInfo.of<Int16>(), TypeInfo.of<UInt32>(), TypeInfo.of<Float64>()], [])
            @Expect("assertion#6822: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("实参个数与形参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply("hello", [TypeInfo.of<Float64>(), TypeInfo.of<Int16>(), TypeInfo.of<UInt32>()], [])
            @Expect("assertion#6823: not throw", "实参个数与形参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(StandardStructType<Unit, UInt16, Unit>(), [TypeInfo.of<Float64>(), TypeInfo.of<Int16>()], [])
            @Expect("assertion#6824: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(
                    1i64,
                    [TypeInfo.of<Float64>(), TypeInfo.of<Int16>(), TypeInfo.of<UInt32>(), TypeInfo.of<Float64>()],
                    []
                )
            @Expect("assertion#6825: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply("hello", [TypeInfo.of<Int16>(), TypeInfo.of<UInt32>()],
                    [GenericStructWith2TypeParameters<Unit, Unit>(), 114.514000f64])
            @Expect("assertion#6826: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(1i64, [TypeInfo.of<Float64>(), TypeInfo.of<Int16>()],
                    [GenericStructWith2TypeParameters<Unit, Unit>(), 114.514000f64])
            @Expect("assertion#6827: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(
                    StandardStructType<Unit, UInt16, Unit>(),
                    [TypeInfo.of<Float64>(), TypeInfo.of<Int16>(), TypeInfo.of<UInt32>(), TypeInfo.of<Float64>()],
                    [GenericStructWith2TypeParameters<Unit, Unit>(), 114.514000f64]
                )
            @Expect("assertion#6828: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型检查失败")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(StandardStructType<Unit, UInt16, Unit>(),
                    [TypeInfo.of<Float64>(), TypeInfo.of<Int16>(), TypeInfo.of<UInt32>()], [()])
            @Expect("assertion#6829: not throw", "类型检查失败")
        } catch (e: IllegalTypeException) {
            @Expect(e.message, "The input parameter does not match the type of the input parameter required by the function.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(1i64, [TypeInfo.of<Int16>(), TypeInfo.of<UInt32>()], [()])
            @Expect("assertion#6830: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply("hello", [TypeInfo.of<Float64>(), TypeInfo.of<Int16>()], [()])
            @Expect("assertion#6831: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(
                    StandardStructType<Unit, UInt16, Unit>(),
                    [TypeInfo.of<Float64>(), TypeInfo.of<Int16>(), TypeInfo.of<UInt32>(), TypeInfo.of<Float64>()],
                    [GenericStructWith2TypeParameters<Unit, Unit>()]
                )
            @Expect("assertion#6832: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(StandardStructType<Unit, UInt16, Unit>(), [TypeInfo.of<Float64>(), TypeInfo.of<Int16>()], [])
            @Expect("assertion#6833: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(StandardStructType<Unit, UInt16, Unit>(), [TypeInfo.of<Int16>(), TypeInfo.of<UInt32>()], [])
            @Expect("assertion#6834: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("实参个数与形参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(
                    StandardStructType<Unit, UInt16, Unit>(),
                    [TypeInfo.of<Float64>(), TypeInfo.of<Int16>(), TypeInfo.of<UInt32>()],
                    [GenericStructWith2TypeParameters<Unit, Unit>(), 114.514000f64]
                )
            @Expect("assertion#6835: not throw", "实参个数与形参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(StandardStructType<Unit, UInt16, Unit>(),
                    [TypeInfo.of<Float64>(), TypeInfo.of<Int16>(), TypeInfo.of<UInt32>(), TypeInfo.of<Float64>()], [()])
            @Expect("assertion#6836: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(StandardStructType<Unit, UInt16, Unit>(), [GenericStructWith2TypeParameters<Unit, Unit>()])
            @Expect("assertion#6837: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(1i64, [GenericStructWith2TypeParameters<Unit, Unit>()])
            @Expect("assertion#6838: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply("hello", [GenericStructWith2TypeParameters<Unit, Unit>()])
            @Expect("assertion#6839: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(StandardStructType<Unit, UInt16, Unit>(), [])
            @Expect("assertion#6840: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(1i64, [])
            @Expect("assertion#6841: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply("hello", [])
            @Expect("assertion#6842: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(StandardStructType<Unit, UInt16, Unit>(), [])
            @Expect("assertion#6843: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(1i64, [])
            @Expect("assertion#6844: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply("hello", [])
            @Expect("assertion#6845: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(StandardStructType<Unit, UInt16, Unit>(),
                    [GenericStructWith2TypeParameters<Unit, Unit>(), 114.514000f64])
            @Expect("assertion#6846: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(1i64, [GenericStructWith2TypeParameters<Unit, Unit>(), 114.514000f64])
            @Expect("assertion#6847: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply("hello", [GenericStructWith2TypeParameters<Unit, Unit>(), 114.514000f64])
            @Expect("assertion#6848: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(StandardStructType<Unit, UInt16, Unit>(), [()])
            @Expect("assertion#6849: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply(1i64, [()])
            @Expect("assertion#6850: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, UInt16, Unit>>()
                .getInstanceFunctions("classInstanceMemberFunction_215")[0i64]
                .apply("hello", [()])
            @Expect("assertion#6851: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("testcase TestCase_214 ends.")
    }

    @TestCase
    func TestCase_215(): Unit {
        logger.info("testcase TestCase_215 begins.")
        @Expect(1i64, TypeInfo.of<StandardStructType<UInt16, Int64, Int8>>().getInstanceFunctions("classInstanceMemberFunction_216").size)
        logger.info("成功调用")
        TypeInfo
            .of<StandardStructType<UInt16, Int64, Int8>>()
            .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
            .apply(
                StandardStructType<UInt16, Int64, Int8>(),
                [TypeInfo.of<UInt16>(), TypeInfo.of<Float32>(), TypeInfo.of<UInt64>()],
                [GenericStructWith2TypeParameters<UInt16, UInt16>()]
            )
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(1i64, [TypeInfo.of<Float32>(), TypeInfo.of<UInt64>()],
                    [GenericStructWith2TypeParameters<UInt16, UInt16>()])
            @Expect("assertion#6852: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply("hello", [TypeInfo.of<UInt16>(), TypeInfo.of<Float32>()],
                    [GenericStructWith2TypeParameters<UInt16, UInt16>()])
            @Expect("assertion#6853: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("实参个数与形参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(1i64, [TypeInfo.of<UInt16>(), TypeInfo.of<Float32>(), TypeInfo.of<UInt64>()], [])
            @Expect("assertion#6854: not throw", "实参个数与形参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(StandardStructType<UInt16, Int64, Int8>(), [TypeInfo.of<Float32>(), TypeInfo.of<UInt64>()], [])
            @Expect("assertion#6855: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply("hello",
                    [TypeInfo.of<UInt16>(), TypeInfo.of<Float32>(), TypeInfo.of<UInt64>(), TypeInfo.of<Float64>()], [])
            @Expect("assertion#6856: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("实参个数与形参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply("hello", [TypeInfo.of<UInt16>(), TypeInfo.of<Float32>(), TypeInfo.of<UInt64>()], [])
            @Expect("assertion#6857: not throw", "实参个数与形参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(StandardStructType<UInt16, Int64, Int8>(), [TypeInfo.of<UInt16>(), TypeInfo.of<Float32>()], [])
            @Expect("assertion#6858: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(
                    1i64,
                    [TypeInfo.of<UInt16>(), TypeInfo.of<Float32>(), TypeInfo.of<UInt64>(), TypeInfo.of<Float64>()],
                    []
                )
            @Expect("assertion#6859: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply("hello", [TypeInfo.of<Float32>(), TypeInfo.of<UInt64>()],
                    [GenericStructWith2TypeParameters<UInt16, UInt16>(), 114.514000f64])
            @Expect("assertion#6860: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(1i64, [TypeInfo.of<UInt16>(), TypeInfo.of<Float32>()],
                    [GenericStructWith2TypeParameters<UInt16, UInt16>(), 114.514000f64])
            @Expect("assertion#6861: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(
                    StandardStructType<UInt16, Int64, Int8>(),
                    [TypeInfo.of<UInt16>(), TypeInfo.of<Float32>(), TypeInfo.of<UInt64>(), TypeInfo.of<Float64>()],
                    [GenericStructWith2TypeParameters<UInt16, UInt16>(), 114.514000f64]
                )
            @Expect("assertion#6862: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型检查失败")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(StandardStructType<UInt16, Int64, Int8>(),
                    [TypeInfo.of<UInt16>(), TypeInfo.of<Float32>(), TypeInfo.of<UInt64>()], [()])
            @Expect("assertion#6863: not throw", "类型检查失败")
        } catch (e: IllegalTypeException) {
            @Expect(e.message, "The input parameter does not match the type of the input parameter required by the function.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(1i64, [TypeInfo.of<Float32>(), TypeInfo.of<UInt64>()], [()])
            @Expect("assertion#6864: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply("hello", [TypeInfo.of<UInt16>(), TypeInfo.of<Float32>()], [()])
            @Expect("assertion#6865: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(
                    StandardStructType<UInt16, Int64, Int8>(),
                    [TypeInfo.of<UInt16>(), TypeInfo.of<Float32>(), TypeInfo.of<UInt64>(), TypeInfo.of<Float64>()],
                    [GenericStructWith2TypeParameters<UInt16, UInt16>()]
                )
            @Expect("assertion#6866: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(StandardStructType<UInt16, Int64, Int8>(), [TypeInfo.of<UInt16>(), TypeInfo.of<Float32>()], [])
            @Expect("assertion#6867: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(StandardStructType<UInt16, Int64, Int8>(), [TypeInfo.of<Float32>(), TypeInfo.of<UInt64>()], [])
            @Expect("assertion#6868: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("实参个数与形参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(
                    StandardStructType<UInt16, Int64, Int8>(),
                    [TypeInfo.of<UInt16>(), TypeInfo.of<Float32>(), TypeInfo.of<UInt64>()],
                    [GenericStructWith2TypeParameters<UInt16, UInt16>(), 114.514000f64]
                )
            @Expect("assertion#6869: not throw", "实参个数与形参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(StandardStructType<UInt16, Int64, Int8>(),
                    [TypeInfo.of<UInt16>(), TypeInfo.of<Float32>(), TypeInfo.of<UInt64>(), TypeInfo.of<Float64>()], [()]
                )
            @Expect("assertion#6870: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(StandardStructType<UInt16, Int64, Int8>(), [GenericStructWith2TypeParameters<UInt16, UInt16>()])
            @Expect("assertion#6871: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(1i64, [GenericStructWith2TypeParameters<UInt16, UInt16>()])
            @Expect("assertion#6872: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply("hello", [GenericStructWith2TypeParameters<UInt16, UInt16>()])
            @Expect("assertion#6873: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(StandardStructType<UInt16, Int64, Int8>(), [])
            @Expect("assertion#6874: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(1i64, [])
            @Expect("assertion#6875: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply("hello", [])
            @Expect("assertion#6876: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(StandardStructType<UInt16, Int64, Int8>(), [])
            @Expect("assertion#6877: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(1i64, [])
            @Expect("assertion#6878: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply("hello", [])
            @Expect("assertion#6879: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(StandardStructType<UInt16, Int64, Int8>(),
                    [GenericStructWith2TypeParameters<UInt16, UInt16>(), 114.514000f64])
            @Expect("assertion#6880: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(1i64, [GenericStructWith2TypeParameters<UInt16, UInt16>(), 114.514000f64])
            @Expect("assertion#6881: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply("hello", [GenericStructWith2TypeParameters<UInt16, UInt16>(), 114.514000f64])
            @Expect("assertion#6882: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(StandardStructType<UInt16, Int64, Int8>(), [()])
            @Expect("assertion#6883: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply(1i64, [()])
            @Expect("assertion#6884: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt16, Int64, Int8>>()
                .getInstanceFunctions("classInstanceMemberFunction_216")[0i64]
                .apply("hello", [()])
            @Expect("assertion#6885: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("testcase TestCase_215 ends.")
    }

    @TestCase
    func TestCase_216(): Unit {
        logger.info("testcase TestCase_216 begins.")
        @Expect(1i64, TypeInfo.of<StandardStructType<Unit, Int16, Int32>>().getInstanceFunctions("classInstanceMemberFunction_217").size)
        logger.info("成功调用")
        TypeInfo
            .of<StandardStructType<Unit, Int16, Int32>>()
            .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
            .apply(
                StandardStructType<Unit, Int16, Int32>(),
                [TypeInfo.of<UInt16>(), TypeInfo.of<Int8>(), TypeInfo.of<UInt64>()],
                [GenericStructWith2TypeParameters<Int8, Int8>()]
            )
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(1i64, [TypeInfo.of<Int8>(), TypeInfo.of<UInt64>()],
                    [GenericStructWith2TypeParameters<Int8, Int8>()])
            @Expect("assertion#6886: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply("hello", [TypeInfo.of<UInt16>(), TypeInfo.of<Int8>()],
                    [GenericStructWith2TypeParameters<Int8, Int8>()])
            @Expect("assertion#6887: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("实参个数与形参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(1i64, [TypeInfo.of<UInt16>(), TypeInfo.of<Int8>(), TypeInfo.of<UInt64>()], [])
            @Expect("assertion#6888: not throw", "实参个数与形参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(StandardStructType<Unit, Int16, Int32>(), [TypeInfo.of<Int8>(), TypeInfo.of<UInt64>()], [])
            @Expect("assertion#6889: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(
                    "hello",
                    [TypeInfo.of<UInt16>(), TypeInfo.of<Int8>(), TypeInfo.of<UInt64>(), TypeInfo.of<Float64>()],
                    []
                )
            @Expect("assertion#6890: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("实参个数与形参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply("hello", [TypeInfo.of<UInt16>(), TypeInfo.of<Int8>(), TypeInfo.of<UInt64>()], [])
            @Expect("assertion#6891: not throw", "实参个数与形参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(StandardStructType<Unit, Int16, Int32>(), [TypeInfo.of<UInt16>(), TypeInfo.of<Int8>()], [])
            @Expect("assertion#6892: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(1i64, [TypeInfo.of<UInt16>(), TypeInfo.of<Int8>(), TypeInfo.of<UInt64>(), TypeInfo.of<Float64>()],
                    [])
            @Expect("assertion#6893: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply("hello", [TypeInfo.of<Int8>(), TypeInfo.of<UInt64>()],
                    [GenericStructWith2TypeParameters<Int8, Int8>(), 114.514000f64])
            @Expect("assertion#6894: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(1i64, [TypeInfo.of<UInt16>(), TypeInfo.of<Int8>()],
                    [GenericStructWith2TypeParameters<Int8, Int8>(), 114.514000f64])
            @Expect("assertion#6895: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(
                    StandardStructType<Unit, Int16, Int32>(),
                    [TypeInfo.of<UInt16>(), TypeInfo.of<Int8>(), TypeInfo.of<UInt64>(), TypeInfo.of<Float64>()],
                    [GenericStructWith2TypeParameters<Int8, Int8>(), 114.514000f64]
                )
            @Expect("assertion#6896: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型检查失败")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(StandardStructType<Unit, Int16, Int32>(),
                    [TypeInfo.of<UInt16>(), TypeInfo.of<Int8>(), TypeInfo.of<UInt64>()], [()])
            @Expect("assertion#6897: not throw", "类型检查失败")
        } catch (e: IllegalTypeException) {
            @Expect(e.message, "The input parameter does not match the type of the input parameter required by the function.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(1i64, [TypeInfo.of<Int8>(), TypeInfo.of<UInt64>()], [()])
            @Expect("assertion#6898: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply("hello", [TypeInfo.of<UInt16>(), TypeInfo.of<Int8>()], [()])
            @Expect("assertion#6899: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(
                    StandardStructType<Unit, Int16, Int32>(),
                    [TypeInfo.of<UInt16>(), TypeInfo.of<Int8>(), TypeInfo.of<UInt64>(), TypeInfo.of<Float64>()],
                    [GenericStructWith2TypeParameters<Int8, Int8>()]
                )
            @Expect("assertion#6900: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(StandardStructType<Unit, Int16, Int32>(), [TypeInfo.of<UInt16>(), TypeInfo.of<Int8>()], [])
            @Expect("assertion#6901: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(StandardStructType<Unit, Int16, Int32>(), [TypeInfo.of<Int8>(), TypeInfo.of<UInt64>()], [])
            @Expect("assertion#6902: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("实参个数与形参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(
                    StandardStructType<Unit, Int16, Int32>(),
                    [TypeInfo.of<UInt16>(), TypeInfo.of<Int8>(), TypeInfo.of<UInt64>()],
                    [GenericStructWith2TypeParameters<Int8, Int8>(), 114.514000f64]
                )
            @Expect("assertion#6903: not throw", "实参个数与形参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(StandardStructType<Unit, Int16, Int32>(),
                    [TypeInfo.of<UInt16>(), TypeInfo.of<Int8>(), TypeInfo.of<UInt64>(), TypeInfo.of<Float64>()], [()])
            @Expect("assertion#6904: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(StandardStructType<Unit, Int16, Int32>(), [GenericStructWith2TypeParameters<Int8, Int8>()])
            @Expect("assertion#6905: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(1i64, [GenericStructWith2TypeParameters<Int8, Int8>()])
            @Expect("assertion#6906: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply("hello", [GenericStructWith2TypeParameters<Int8, Int8>()])
            @Expect("assertion#6907: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(StandardStructType<Unit, Int16, Int32>(), [])
            @Expect("assertion#6908: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(1i64, [])
            @Expect("assertion#6909: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply("hello", [])
            @Expect("assertion#6910: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(StandardStructType<Unit, Int16, Int32>(), [])
            @Expect("assertion#6911: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(1i64, [])
            @Expect("assertion#6912: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply("hello", [])
            @Expect("assertion#6913: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(StandardStructType<Unit, Int16, Int32>(),
                    [GenericStructWith2TypeParameters<Int8, Int8>(), 114.514000f64])
            @Expect("assertion#6914: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(1i64, [GenericStructWith2TypeParameters<Int8, Int8>(), 114.514000f64])
            @Expect("assertion#6915: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply("hello", [GenericStructWith2TypeParameters<Int8, Int8>(), 114.514000f64])
            @Expect("assertion#6916: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(StandardStructType<Unit, Int16, Int32>(), [()])
            @Expect("assertion#6917: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply(1i64, [()])
            @Expect("assertion#6918: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<Unit, Int16, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_217")[0i64]
                .apply("hello", [()])
            @Expect("assertion#6919: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("testcase TestCase_216 ends.")
    }

    @TestCase
    func TestCase_217(): Unit {
        logger.info("testcase TestCase_217 begins.")
        @Expect(1i64, TypeInfo.of<StandardStructType<UInt64, Int8, Int32>>().getInstanceFunctions("classInstanceMemberFunction_218").size)
        logger.info("成功调用")
        TypeInfo
            .of<StandardStructType<UInt64, Int8, Int32>>()
            .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
            .apply(
                StandardStructType<UInt64, Int8, Int32>(),
                [TypeInfo.of<UInt64>(), TypeInfo.of<UInt16>(), TypeInfo.of<Int32>()],
                [GenericStructWith2TypeParameters<Int32, Int32>()]
            )
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(1i64, [TypeInfo.of<UInt16>(), TypeInfo.of<Int32>()],
                    [GenericStructWith2TypeParameters<Int32, Int32>()])
            @Expect("assertion#6920: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply("hello", [TypeInfo.of<UInt64>(), TypeInfo.of<UInt16>()],
                    [GenericStructWith2TypeParameters<Int32, Int32>()])
            @Expect("assertion#6921: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("实参个数与形参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(1i64, [TypeInfo.of<UInt64>(), TypeInfo.of<UInt16>(), TypeInfo.of<Int32>()], [])
            @Expect("assertion#6922: not throw", "实参个数与形参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(StandardStructType<UInt64, Int8, Int32>(), [TypeInfo.of<UInt16>(), TypeInfo.of<Int32>()], [])
            @Expect("assertion#6923: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply("hello",
                    [TypeInfo.of<UInt64>(), TypeInfo.of<UInt16>(), TypeInfo.of<Int32>(), TypeInfo.of<Float64>()], [])
            @Expect("assertion#6924: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("实参个数与形参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply("hello", [TypeInfo.of<UInt64>(), TypeInfo.of<UInt16>(), TypeInfo.of<Int32>()], [])
            @Expect("assertion#6925: not throw", "实参个数与形参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(StandardStructType<UInt64, Int8, Int32>(), [TypeInfo.of<UInt64>(), TypeInfo.of<UInt16>()], [])
            @Expect("assertion#6926: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(1i64, [TypeInfo.of<UInt64>(), TypeInfo.of<UInt16>(), TypeInfo.of<Int32>(), TypeInfo.of<Float64>()],
                    [])
            @Expect("assertion#6927: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply("hello", [TypeInfo.of<UInt16>(), TypeInfo.of<Int32>()],
                    [GenericStructWith2TypeParameters<Int32, Int32>(), 114.514000f64])
            @Expect("assertion#6928: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(1i64, [TypeInfo.of<UInt64>(), TypeInfo.of<UInt16>()],
                    [GenericStructWith2TypeParameters<Int32, Int32>(), 114.514000f64])
            @Expect("assertion#6929: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(
                    StandardStructType<UInt64, Int8, Int32>(),
                    [TypeInfo.of<UInt64>(), TypeInfo.of<UInt16>(), TypeInfo.of<Int32>(), TypeInfo.of<Float64>()],
                    [GenericStructWith2TypeParameters<Int32, Int32>(), 114.514000f64]
                )
            @Expect("assertion#6930: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型检查失败")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(StandardStructType<UInt64, Int8, Int32>(),
                    [TypeInfo.of<UInt64>(), TypeInfo.of<UInt16>(), TypeInfo.of<Int32>()], [()])
            @Expect("assertion#6931: not throw", "类型检查失败")
        } catch (e: IllegalTypeException) {
            @Expect(e.message, "The input parameter does not match the type of the input parameter required by the function.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(1i64, [TypeInfo.of<UInt16>(), TypeInfo.of<Int32>()], [()])
            @Expect("assertion#6932: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply("hello", [TypeInfo.of<UInt64>(), TypeInfo.of<UInt16>()], [()])
            @Expect("assertion#6933: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(
                    StandardStructType<UInt64, Int8, Int32>(),
                    [TypeInfo.of<UInt64>(), TypeInfo.of<UInt16>(), TypeInfo.of<Int32>(), TypeInfo.of<Float64>()],
                    [GenericStructWith2TypeParameters<Int32, Int32>()]
                )
            @Expect("assertion#6934: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(StandardStructType<UInt64, Int8, Int32>(), [TypeInfo.of<UInt64>(), TypeInfo.of<UInt16>()], [])
            @Expect("assertion#6935: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(StandardStructType<UInt64, Int8, Int32>(), [TypeInfo.of<UInt16>(), TypeInfo.of<Int32>()], [])
            @Expect("assertion#6936: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("实参个数与形参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(
                    StandardStructType<UInt64, Int8, Int32>(),
                    [TypeInfo.of<UInt64>(), TypeInfo.of<UInt16>(), TypeInfo.of<Int32>()],
                    [GenericStructWith2TypeParameters<Int32, Int32>(), 114.514000f64]
                )
            @Expect("assertion#6937: not throw", "实参个数与形参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input parameter item does not comply with the required quantity.")
        }
        logger.info("类型形参个数与类型实参个数不等")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(StandardStructType<UInt64, Int8, Int32>(),
                    [TypeInfo.of<UInt64>(), TypeInfo.of<UInt16>(), TypeInfo.of<Int32>(), TypeInfo.of<Float64>()], [()])
            @Expect("assertion#6938: not throw", "类型形参个数与类型实参个数不等")
        } catch (e: IllegalArgumentException) {
            @Expect(e.message, "The input generic parameter item does not comply with the required quantity.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(StandardStructType<UInt64, Int8, Int32>(), [GenericStructWith2TypeParameters<Int32, Int32>()])
            @Expect("assertion#6939: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(1i64, [GenericStructWith2TypeParameters<Int32, Int32>()])
            @Expect("assertion#6940: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply("hello", [GenericStructWith2TypeParameters<Int32, Int32>()])
            @Expect("assertion#6941: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(StandardStructType<UInt64, Int8, Int32>(), [])
            @Expect("assertion#6942: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(1i64, [])
            @Expect("assertion#6943: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply("hello", [])
            @Expect("assertion#6944: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(StandardStructType<UInt64, Int8, Int32>(), [])
            @Expect("assertion#6945: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(1i64, [])
            @Expect("assertion#6946: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply("hello", [])
            @Expect("assertion#6947: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(StandardStructType<UInt64, Int8, Int32>(),
                    [GenericStructWith2TypeParameters<Int32, Int32>(), 114.514000f64])
            @Expect("assertion#6948: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(1i64, [GenericStructWith2TypeParameters<Int32, Int32>(), 114.514000f64])
            @Expect("assertion#6949: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply("hello", [GenericStructWith2TypeParameters<Int32, Int32>(), 114.514000f64])
            @Expect("assertion#6950: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(StandardStructType<UInt64, Int8, Int32>(), [()])
            @Expect("assertion#6951: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply(1i64, [()])
            @Expect("assertion#6952: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("函数为泛型，类型形参列表未指定")
        try {
            TypeInfo
                .of<StandardStructType<UInt64, Int8, Int32>>()
                .getInstanceFunctions("classInstanceMemberFunction_218")[0i64]
                .apply("hello", [()])
            @Expect("assertion#6953: not throw", "函数为泛型，类型形参列表未指定")
        } catch (e: InvocationTargetException) {
            @Expect(e.message, "The generic function cannot be applied without `genericTypeArgs`.")
        }
        logger.info("testcase TestCase_217 ends.")
    }
}
