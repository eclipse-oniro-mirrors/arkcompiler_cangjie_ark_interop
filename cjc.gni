# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("cj_compiler.gni")

template("cj_library") {
  cj_target(target_name) {
    output_type = "dylib"

    forward_variables_from(invoker,
                           [
                             "deps",
                             "cj_deps",
                             "external_deps",
                             "link_dirs",
                             "link_libs",
                             "cjc_args",
                             "enable_strip",
                             "part_name",
                             "subsystem_name",
                             "outname",
                             "module_name",
                             "kit",
                             "sources",
                             "optLevel",
                           ])
    if (!defined(cjc_args)) {
      cjc_args = []
    }

    if (!defined(module_name)) {
      if (defined(kit) && kit) {
        module_name = "kit"
      } else {
        module_name = "ohos"
      }
    }

    if (defined(link_dirs)) {
      foreach(dir, link_dirs) {
        cjc_args += [ "-L${dir}" ]
      }
    }
    if (defined(link_libs)) {
      foreach(lib, link_libs) {
        cjc_args += [ "-l${lib}" ]
      }
    }
  }
}

template("cj_macro_library") {
  cj_target(target_name) {
    output_type = "macro"
    forward_variables_from(invoker,
                           [
                             "deps",
                             "cj_deps",
                             "external_deps",
                             "link_dirs",
                             "link_libs",
                             "cjc_args",
                             "enable_strip",
                             "part_name",
                             "subsystem_name",
                             "module_name",
                             "sources",
                             "optLevel",
                           ])
    if (!defined(module_name)) {
      module_name = "ohos"
    }
    if (!defined(cjc_args)) {
      cjc_args = []
    }

    if (defined(link_dirs)) {
      foreach(dir, link_dirs) {
        cjc_args += [ "-L${dir}" ]
      }
    }
    if (defined(link_libs)) {
      foreach(lib, link_libs) {
        cjc_args += [ "-l${lib}" ]
      }
    }

    if (defined(invoker.compilation_config)) {
      cjc_args += [ "--cfg=${invoker.compilation_config}" ]
    }
  }
}

template("ohos_cj_library") {
  cj_deps = []
  cross_native_deps = []
  native_deps = []
  cross_native_exts = []
  if (defined(invoker.cj_deps)) {
    cj_deps = invoker.cj_deps
  }
  if (defined(invoker.cross_native_deps)) {
    cross_native_deps = invoker.cross_native_deps
  }
  if (defined(invoker.native_deps)) {
    native_deps = invoker.native_deps
  }
  if (defined(invoker.cross_native_exts)) {
    cross_native_exts = invoker.cross_native_exts
  }
  cj_library(target_name) {
    forward_variables_from(invoker,
                           [
                             "part_name",
                             "subsystem_name",
                             "enable_strip",
                             "module_name",
                             "kit",
                             "sources",
                             "optLevel",
                           ])
    outname = target_name
    if (defined(invoker.lib_name)) {
      outname = invoker.lib_name
    }
    if (!defined(optLevel)) {
      optLevel = "2"
    }
    cjc_args = []
    if (defined(invoker.cjc_args)) {
      cjc_args += invoker.cjc_args
    }
    if (defined(invoker.compilation_config)) {
      cjc_args += [ "--cfg=${invoker.compilation_config}" ]
    }
    deps = []
    if (defined(invoker.external_deps)) {
      if (build_ohos_sdk && is_ohos) {
        foreach(label, invoker.external_deps) {
          subsystem_part = []
          subsystem_part = string_split(label, ":")
          libname = subsystem_part[1]
          deps += [ "${cjc_script_root}/mocks:${libname}" ]
        }
      } else {
        external_deps = invoker.external_deps
      }
    }

    foreach(dep, cross_native_deps) {
      if (build_ohos_sdk && is_ohos) {
        deps += [ "${cjc_script_root}/mocks:${dep.libname}" ]
      } else {
        deps += [ dep.label ]
      }
    }
    foreach(dep, native_deps) {
      if (!build_ohos_sdk) {
        deps += [ dep.label ]
      } else if (defined(dep.libname)) {
        deps += [ "${cjc_script_root}/mocks:${dep.libname}" ]
      } else {
        dep_target_name = get_label_info(dep.label, "name")
        deps += [ "${cjc_script_root}/mocks:${dep_target_name}" ]
      }
    }
    if (!defined(external_deps)) {
      external_deps = []
    }
    foreach(dep, cross_native_exts) {
      if (build_ohos_sdk && is_ohos) {
        deps += [ "${cjc_script_root}/mocks:${dep.libname}" ]
      } else {
        external_deps += [ dep.label ]
      }
    }

    if ((!build_ohos_sdk || !is_ohos) && !is_asan) {
      cjc_args += [ "--link-options=--no-undefined" ]
    }
  }
}
